//This file is automatically generated

 //字典管理
let DictApiController = {
    __name: 'DictApiController',
    getDictEntryByDictEntryCode: {controller: 'DictApiController' , method: 'getDictEntryByDictEntryCode'}, // 根据字典项编码查询字典项目
    getDictEntryByDictEntryId: {controller: 'DictApiController' , method: 'getDictEntryByDictEntryId'}, // 根据字典项ID查询字典项目
    getDictEntryByDictEntryParentCode: {controller: 'DictApiController' , method: 'getDictEntryByDictEntryParentCode'}, // 根据字典项父编码查询字典项目
    getDictEntryByDictTypeCode: {controller: 'DictApiController' , method: 'getDictEntryByDictTypeCode'}, // 根据字典类型编码查询字典项目
    getDictTypeByCode: {controller: 'DictApiController' , method: 'getDictTypeByCode'}, // 根据编码查询字典类型
    getDictTypeByParentCode: {controller: 'DictApiController' , method: 'getDictTypeByParentCode'}, // 根据父编码查询字典类型
};
 //用户管理
let AuthApiController = {
    __name: 'AuthApiController',
    deleteAttr: {controller: 'AuthApiController' , method: 'deleteAttr'}, // 删除用户属性
    deleteAttrs: {controller: 'AuthApiController' , method: 'deleteAttrs'}, // 删除用户属性列表
    get: {controller: 'AuthApiController' , method: 'get'}, // 当前登录人信息
    getAttr: {controller: 'AuthApiController' , method: 'getAttr'}, // 获得用户具体属性
    getAttrs: {controller: 'AuthApiController' , method: 'getAttrs'}, // 获得用户属性列表
    login: {controller: 'AuthApiController' , method: 'login'}, // 登录
    logout: {controller: 'AuthApiController' , method: 'logout'}, // 退出
    updateAttr: {controller: 'AuthApiController' , method: 'updateAttr'}, // 更新用户属性
    updateAttrs: {controller: 'AuthApiController' , method: 'updateAttrs'}, // 更新用户属性列表
};
 //预约中心
let BarberControllerImpl = {
    __name: 'BarberControllerImpl',
    addBarber: {controller: 'BarberControllerImpl' , method: 'addBarber'}, // 发布理发室
    addBarberUser: {controller: 'BarberControllerImpl' , method: 'addBarberUser'}, // 预约理发室
    addClinic: {controller: 'BarberControllerImpl' , method: 'addClinic'}, // 发布医务室
    addClinicUser: {controller: 'BarberControllerImpl' , method: 'addClinicUser'}, // 预约医务室
    addZeroRestaurant: {controller: 'BarberControllerImpl' , method: 'addZeroRestaurant'}, // 发布零点餐厅
    addZeroRestaurantUser: {controller: 'BarberControllerImpl' , method: 'addZeroRestaurantUser'}, // 预约零点餐厅
    deleteBarber: {controller: 'BarberControllerImpl' , method: 'deleteBarber'}, // 删除一个发布的理发室信息
    deleteClinic: {controller: 'BarberControllerImpl' , method: 'deleteClinic'}, // 删除一个发布的医务室信息
    deleteZeroRestaurant: {controller: 'BarberControllerImpl' , method: 'deleteZeroRestaurant'}, // 删除一个发布的零点餐厅信息
    queryAllForBarber: {controller: 'BarberControllerImpl' , method: 'queryAllForBarber'}, // 管理员查询全部预约情况
    queryAllForClinic: {controller: 'BarberControllerImpl' , method: 'queryAllForClinic'}, // 管理员查询全部预约情况
    queryAllForZeroRestaurant: {controller: 'BarberControllerImpl' , method: 'queryAllForZeroRestaurant'}, // 管理员查询全部预约情况
    queryByMonthForBarber: {controller: 'BarberControllerImpl' , method: 'queryByMonthForBarber'}, // 根据日期进行查询预约情况
    queryByMonthForClinic: {controller: 'BarberControllerImpl' , method: 'queryByMonthForClinic'}, // 根据日期进行查询预约情况
    queryByMonthForZeroRestaurant: {controller: 'BarberControllerImpl' , method: 'queryByMonthForZeroRestaurant'}, // 根据日期进行查询预约情况
    queryByStateForBarber: {controller: 'BarberControllerImpl' , method: 'queryByStateForBarber'}, // 根据预约状态查询理发室的预约情况
    queryByStateForClinic: {controller: 'BarberControllerImpl' , method: 'queryByStateForClinic'}, // 根据预约状态查询医务室的预约情况
    queryByStateForZeroRestaurant: {controller: 'BarberControllerImpl' , method: 'queryByStateForZeroRestaurant'}, // 根据预约状态查询零点餐厅的预约情况
    queryByTypeAndDateForBarber: {controller: 'BarberControllerImpl' , method: 'queryByTypeAndDateForBarber'}, // 根据预约类型和日期查询理发室的预约情况  名额
    queryByTypeAndDateForClinic: {controller: 'BarberControllerImpl' , method: 'queryByTypeAndDateForClinic'}, // 根据预约类型和日期查询医务室的预约情况  名额
    queryByTypeAndDateForZeroRestaurant: {controller: 'BarberControllerImpl' , method: 'queryByTypeAndDateForZeroRestaurant'}, // 根据预约类型和日期查询零点餐厅的预约情况  名额
    updateBarber: {controller: 'BarberControllerImpl' , method: 'updateBarber'}, // 修改发布的理发室信息
    updateCancelForBarber: {controller: 'BarberControllerImpl' , method: 'updateCancelForBarber'}, // 取消理发室预约
    updateCancelForClinic: {controller: 'BarberControllerImpl' , method: 'updateCancelForClinic'}, // 取消医务室预约
    updateCancelForZeroRestaurant: {controller: 'BarberControllerImpl' , method: 'updateCancelForZeroRestaurant'}, // 取消零点餐厅预约
    updateClinic: {controller: 'BarberControllerImpl' , method: 'updateClinic'}, // 修改发布的医务室信息
    updateSignForBarber: {controller: 'BarberControllerImpl' , method: 'updateSignForBarber'}, // 理发室预约签到
    updateSignForClinic: {controller: 'BarberControllerImpl' , method: 'updateSignForClinic'}, // 医务室预约签到
    updateSignForZeroRestaurant: {controller: 'BarberControllerImpl' , method: 'updateSignForZeroRestaurant'}, // 零点餐厅预约签到
    updateZeroRestaurant: {controller: 'BarberControllerImpl' , method: 'updateZeroRestaurant'}, // 修改发布的零点餐厅信息
};
 //pipe-report-controller
let PipeReportController = {
    __name: 'PipeReportController',
    create: {controller: 'PipeReportController' , method: 'create'}, // create
    deleteById: {controller: 'PipeReportController' , method: 'deleteById'}, // deleteById
    findAll: {controller: 'PipeReportController' , method: 'findAll'}, // findAll
    findByCriteria: {controller: 'PipeReportController' , method: 'findByCriteria'}, // findByCriteria
    getById: {controller: 'PipeReportController' , method: 'getById'}, // getById
    pagingAll: {controller: 'PipeReportController' , method: 'pagingAll'}, // pagingAll
    pagingByCriteria: {controller: 'PipeReportController' , method: 'pagingByCriteria'}, // pagingByCriteria
    update: {controller: 'PipeReportController' , method: 'update'}, // update
};
 //人员健康管理
let HealthApiController = {
    __name: 'HealthApiController',
    getHealthInfo: {controller: 'HealthApiController' , method: 'getHealthInfo'}, // 获取人员健康信息
    updateHealthInfo: {controller: 'HealthApiController' , method: 'updateHealthInfo'}, // 根据人员id更新人员健康录入信息
};
 //文化建设
let CulturalControllerImpl = {
    __name: 'CulturalControllerImpl',
    addCommunicationCircle: {controller: 'CulturalControllerImpl' , method: 'addCommunicationCircle'}, // 添加一个交流圈（发帖子）
    allPageSreach: {controller: 'CulturalControllerImpl' , method: 'allPageSreach'}, // 根据分页数据查询公告列表、企业新闻、交流圈
    deleteCommunicationCircle: {controller: 'CulturalControllerImpl' , method: 'deleteCommunicationCircle'}, // 根据主键删除交流圈
    fabulousCommunicationCircle: {controller: 'CulturalControllerImpl' , method: 'fabulousCommunicationCircle'}, // 根据交流圈主键点赞或取消点赞
    getCommunicationCircleEntity: {controller: 'CulturalControllerImpl' , method: 'getCommunicationCircleEntity'}, // 根据交流圈主键获取交流圈详细信息与评论列表信息
    getNotice: {controller: 'CulturalControllerImpl' , method: 'getNotice'}, // 根据主键查询公告
    noticePageSreach: {controller: 'CulturalControllerImpl' , method: 'noticePageSreach'}, // 根据分页数据查询公告列表
};
 //日程
let ScheduleControllerImpl = {
    __name: 'ScheduleControllerImpl',
    addParSchedule: {controller: 'ScheduleControllerImpl' , method: 'addParSchedule'}, // 新增一个参与人
    addSchedule: {controller: 'ScheduleControllerImpl' , method: 'addSchedule'}, // 新增一个日程
    delParSchedule: {controller: 'ScheduleControllerImpl' , method: 'delParSchedule'}, // 删除一个参与人
    deleteSchedule: {controller: 'ScheduleControllerImpl' , method: 'deleteSchedule'}, // 删除一个日程
    queryScheduleByMM: {controller: 'ScheduleControllerImpl' , method: 'queryScheduleByMM'}, // 根据时间区间查询日程列表
    updateAgree: {controller: 'ScheduleControllerImpl' , method: 'updateAgree'}, // 确认同意或拒绝
    updateSchedule: {controller: 'ScheduleControllerImpl' , method: 'updateSchedule'}, // 修改一个日程
};
 //帮助中心
let HelpControllerImpl = {
    __name: 'HelpControllerImpl',
    AddCommonProblem: {controller: 'HelpControllerImpl' , method: 'AddCommonProblem'}, // 新增一个常见问题
    AddDemandFeedbackReply: {controller: 'HelpControllerImpl' , method: 'AddDemandFeedbackReply'}, // 新增一个需求反馈回复
    AddProductIntroduction: {controller: 'HelpControllerImpl' , method: 'AddProductIntroduction'}, // 新增一个产品介绍
    DelCommonProblem: {controller: 'HelpControllerImpl' , method: 'DelCommonProblem'}, // 删除一个常见问题
    DelProductIntroduction: {controller: 'HelpControllerImpl' , method: 'DelProductIntroduction'}, // 删除一个产品介绍
    UpdateCommonProblem: {controller: 'HelpControllerImpl' , method: 'UpdateCommonProblem'}, // 修改一个常见问题
    UpdateProductIntroduction: {controller: 'HelpControllerImpl' , method: 'UpdateProductIntroduction'}, // 修改一个产品介绍
    addDemandFeedback: {controller: 'HelpControllerImpl' , method: 'addDemandFeedback'}, // 新增一个需求反馈
    delDemandFeedback: {controller: 'HelpControllerImpl' , method: 'delDemandFeedback'}, // 删除 一个需求反馈
    queryByIdJoinReply: {controller: 'HelpControllerImpl' , method: 'queryByIdJoinReply'}, // 根据ID查询一个需求反馈
    queryByTitle: {controller: 'HelpControllerImpl' , method: 'queryByTitle'}, // 根据标题模糊查询所有常见问题
    queryDemandFeedback: {controller: 'HelpControllerImpl' , method: 'queryDemandFeedback'}, // 查询所有需求反馈
    queryProductIntroduction: {controller: 'HelpControllerImpl' , method: 'queryProductIntroduction'}, // 查询所有产品介绍
    updateDemandFeedbackType: {controller: 'HelpControllerImpl' , method: 'updateDemandFeedbackType'}, // 更改需求反馈的状态
};
 //员工卡
let WorkCartControllerImpl = {
    __name: 'WorkCartControllerImpl',
    addDalance: {controller: 'WorkCartControllerImpl' , method: 'addDalance'}, // 充值
    cancelledCard: {controller: 'WorkCartControllerImpl' , method: 'cancelledCard'}, // 注销
    getReviewList: {controller: 'WorkCartControllerImpl' , method: 'getReviewList'}, // 获取审批列表
    getWorkCard: {controller: 'WorkCartControllerImpl' , method: 'getWorkCard'}, // 获取当前员工的员工卡状态
    open: {controller: 'WorkCartControllerImpl' , method: 'open'}, // 员工开卡
    queryWorkCardAll: {controller: 'WorkCartControllerImpl' , method: 'queryWorkCardAll'}, // 查询所有员工卡信息
    queryWorkCardApplyRecord: {controller: 'WorkCartControllerImpl' , method: 'queryWorkCardApplyRecord'}, // 查询员工卡申请记录
    queryWorkCardRecord: {controller: 'WorkCartControllerImpl' , method: 'queryWorkCardRecord'}, // 查询员工卡记录
    replacement: {controller: 'WorkCartControllerImpl' , method: 'replacement'}, // 补卡
    reportTheLoss: {controller: 'WorkCartControllerImpl' , method: 'reportTheLoss'}, // 挂失
    review: {controller: 'WorkCartControllerImpl' , method: 'review'}, // 审核
    updateWorkCard: {controller: 'WorkCartControllerImpl' , method: 'updateWorkCard'}, // 修改员工卡信息
};
 //fileupload
let fileupload = {
    __name: 'fileupload',
    loadFiles: {controller: 'fileupload' , method: 'loadFiles'}, // loadFiles
};
 //agent
let agent = {
    __name: 'agent',
    addAgent: {controller: 'agent' , method: 'addAgent'}, // addAgent
    deleteAgent: {controller: 'agent' , method: 'deleteAgent'}, // deleteAgent
    detailAgent: {controller: 'agent' , method: 'detailAgent'}, // detailAgent
    getProActInfo: {controller: 'agent' , method: 'getProActInfo'}, // getProActInfo
    modifyAgent: {controller: 'agent' , method: 'modifyAgent'}, // modifyAgent
    queryAgent: {controller: 'agent' , method: 'queryAgent'}, // queryAgent
    queryAgentInfo: {controller: 'agent' , method: 'queryAgentInfo'}, // queryAgentInfo
    queryMyAgent: {controller: 'agent' , method: 'queryMyAgent'}, // queryMyAgent
    queryProActInfo: {controller: 'agent' , method: 'queryProActInfo'}, // queryProActInfo
};
 //process
let process = {
    __name: 'process',
    commonQueryProcessInst: {controller: 'process' , method: 'commonQueryProcessInst'}, // commonQueryProcessInst
    createStartProcessInst: {controller: 'process' , method: 'createStartProcessInst'}, // createStartProcessInst
    getCatalogSubByUserid: {controller: 'process' , method: 'getCatalogSubByUserid'}, // getCatalogSubByUserid
    getProcessCatalogs: {controller: 'process' , method: 'getProcessCatalogs'}, // getProcessCatalogs
    queryMyProcess: {controller: 'process' , method: 'queryMyProcess'}, // queryMyProcess
    queryProcess: {controller: 'process' , method: 'queryProcess'}, // queryProcess
    queryPublishedProcessWithCatalog: {controller: 'process' , method: 'queryPublishedProcessWithCatalog'}, // queryPublishedProcessWithCatalog
};
 //task
let task = {
    __name: 'task',
    confrimNotification: {controller: 'task' , method: 'confrimNotification'}, // confrimNotification
    executeWorkItem: {controller: 'task' , method: 'executeWorkItem'}, // executeWorkItem
    openBizform: {controller: 'task' , method: 'openBizform'}, // openBizform
    queryNotificationList: {controller: 'task' , method: 'queryNotificationList'}, // queryNotificationList
    queryTaskList: {controller: 'task' , method: 'queryTaskList'}, // queryTaskList
};
 //web
let web = {
    __name: 'web',
    appointActivities4Freeflow: {controller: 'web' , method: 'appointActivities4Freeflow'}, // appointActivities4Freeflow
    appointParticipants4StepActivity: {controller: 'web' , method: 'appointParticipants4StepActivity'}, // appointParticipants4StepActivity
    fetchMessageList: {controller: 'web' , method: 'fetchMessageList'}, // fetchMessageList
    getActivitesNeedAppointParticipant: {controller: 'web' , method: 'getActivitesNeedAppointParticipant'}, // getActivitesNeedAppointParticipant
    getAppointActivityType: {controller: 'web' , method: 'getAppointActivityType'}, // getAppointActivityType
    getProcessGraph: {controller: 'web' , method: 'getProcessGraph'}, // getProcessGraph
    getWorkItemForm: {controller: 'web' , method: 'getWorkItemForm'}, // getWorkItemForm
    getWorkItemsByProcInstId: {controller: 'web' , method: 'getWorkItemsByProcInstId'}, // getWorkItemsByProcInstId
    isActivitiesAppointed: {controller: 'web' , method: 'isActivitiesAppointed'}, // isActivitiesAppointed
    loadFiles: {controller: 'web' , method: 'loadFiles'}, // loadFiles
    queryAnnotateListByProcessInstID: {controller: 'web' , method: 'queryAnnotateListByProcessInstID'}, // queryAnnotateListByProcessInstID
    queryAnnotateListByTaskID: {controller: 'web' , method: 'queryAnnotateListByTaskID'}, // queryAnnotateListByTaskID
    queryParticipants: {controller: 'web' , method: 'queryParticipants'}, // queryParticipants
    queryPressListByProcessInstID: {controller: 'web' , method: 'queryPressListByProcessInstID'}, // queryPressListByProcessInstID
    queryPressListByTaskID: {controller: 'web' , method: 'queryPressListByTaskID'}, // queryPressListByTaskID
    queryProcessAndActivity: {controller: 'web' , method: 'queryProcessAndActivity'}, // queryProcessAndActivity
    queryStepActivities: {controller: 'web' , method: 'queryStepActivities'}, // queryStepActivities
    searchParticipants: {controller: 'web' , method: 'searchParticipants'}, // searchParticipants
};
 //LoginManager
let LoginManager = {
    __name: 'LoginManager',
    authentication: {controller: 'LoginManager' , method: 'authentication'}, // authentication
    getCasInfo: {controller: 'LoginManager' , method: 'getCasInfo'}, // getCasInfo
    getMenuData: {controller: 'LoginManager' , method: 'getMenuData'}, // getMenuData
    getMenuList: {controller: 'LoginManager' , method: 'getMenuList'}, // getMenuList
    getUserIdAndName: {controller: 'LoginManager' , method: 'getUserIdAndName'}, // getUserIdAndName
    getUserPool: {controller: 'LoginManager' , method: 'getUserPool'}, // getUserPool
    isend: {controller: 'LoginManager' , method: 'isend'}, // isend
    login: {controller: 'LoginManager' , method: 'login'}, // login
    logout: {controller: 'LoginManager' , method: 'logout'}, // logout
    syncUserInfo: {controller: 'LoginManager' , method: 'syncUserInfo'}, // syncUserInfo
};
 //TenantServiceManager
let TenantServiceManager = {
    __name: 'TenantServiceManager',
    changeTenant: {controller: 'TenantServiceManager' , method: 'changeTenant'}, // changeTenant
    checkChangeTenant: {controller: 'TenantServiceManager' , method: 'checkChangeTenant'}, // checkChangeTenant
};
 //service
let service = {
    __name: 'service',
    getFunctionMenuGraph: {controller: 'service' , method: 'getFunctionMenuGraph'}, // getFunctionMenuGraph
    getPartyAuthGraph: {controller: 'service' , method: 'getPartyAuthGraph'}, // getPartyAuthGraph
};
 //ManageableRes
let ManageableRes = {
    __name: 'ManageableRes',
    getManageableGroup: {controller: 'ManageableRes' , method: 'getManageableGroup'}, // getManageableGroup
    getManageableOrg: {controller: 'ManageableRes' , method: 'getManageableOrg'}, // getManageableOrg
};
 //partyauth
let partyauth = {
    __name: 'partyauth',
    addPartyAuth: {controller: 'partyauth' , method: 'addPartyAuth'}, // addPartyAuth
    deletePartyAuth: {controller: 'partyauth' , method: 'deletePartyAuth'}, // deletePartyAuth
    getAuthorizedRoleList: {controller: 'partyauth' , method: 'getAuthorizedRoleList'}, // getAuthorizedRoleList
    getManageableGroup: {controller: 'partyauth' , method: 'getManageableGroup'}, // getManageableGroup
    getManageableOrg: {controller: 'partyauth' , method: 'getManageableOrg'}, // getManageableOrg
    getUnauthorizedRoleList: {controller: 'partyauth' , method: 'getUnauthorizedRoleList'}, // getUnauthorizedRoleList
};
 //TenantManager
let TenantManager = {
    __name: 'TenantManager',
    addTenant: {controller: 'TenantManager' , method: 'addTenant'}, // addTenant
    deleteTenants: {controller: 'TenantManager' , method: 'deleteTenants'}, // deleteTenants
    queryTenants: {controller: 'TenantManager' , method: 'queryTenants'}, // queryTenants
    updateTenant: {controller: 'TenantManager' , method: 'updateTenant'}, // updateTenant
};
 //DictManager
let DictManager = {
    __name: 'DictManager',
    exportDict: {controller: 'DictManager' , method: 'exportDict'}, // exportDict
    importDict: {controller: 'DictManager' , method: 'importDict'}, // importDict
    queryDict: {controller: 'DictManager' , method: 'queryDict'}, // queryDict
    queryDictType: {controller: 'DictManager' , method: 'queryDictType'}, // queryDictType
    refreshDictCache: {controller: 'DictManager' , method: 'refreshDictCache'}, // refreshDictCache
    removeDict: {controller: 'DictManager' , method: 'removeDict'}, // removeDict
    removeDictType: {controller: 'DictManager' , method: 'removeDictType'}, // removeDictType
    removeDictTypeCascade: {controller: 'DictManager' , method: 'removeDictTypeCascade'}, // removeDictTypeCascade
    saveDict: {controller: 'DictManager' , method: 'saveDict'}, // saveDict
    saveDictType: {controller: 'DictManager' , method: 'saveDictType'}, // saveDictType
};
 //rule
let entity = {
    __name: 'entity',
    delRules: {controller: 'entity' , method: 'delRules'}, // delRules
    getConValues: {controller: 'entity' , method: 'getConValues'}, // getConValues
    getEntityCapRules: {controller: 'entity' , method: 'getEntityCapRules'}, // getEntityCapRules
    getEntityInfoPropertie: {controller: 'entity' , method: 'getEntityInfoPropertie'}, // getEntityInfoPropertie
    getEntityInfoProperties: {controller: 'entity' , method: 'getEntityInfoProperties'}, // getEntityInfoProperties
    getEntityInfos: {controller: 'entity' , method: 'getEntityInfos'}, // getEntityInfos
    getRightValues: {controller: 'entity' , method: 'getRightValues'}, // getRightValues
    getRuleCondition: {controller: 'entity' , method: 'getRuleCondition'}, // getRuleCondition
    saveRule: {controller: 'entity' , method: 'saveRule'}, // saveRule
    storePartyAuth: {controller: 'entity' , method: 'storePartyAuth'}, // storePartyAuth
    updateRule: {controller: 'entity' , method: 'updateRule'}, // updateRule
};
 //rule
let rule = {
    __name: 'rule',
    delRules: {controller: 'rule' , method: 'delRules'}, // delRules
    getConValues: {controller: 'rule' , method: 'getConValues'}, // getConValues
    getEntityCapRules: {controller: 'rule' , method: 'getEntityCapRules'}, // getEntityCapRules
    getRightValues: {controller: 'rule' , method: 'getRightValues'}, // getRightValues
    getRuleCondition: {controller: 'rule' , method: 'getRuleCondition'}, // getRuleCondition
    saveRule: {controller: 'rule' , method: 'saveRule'}, // saveRule
    storePartyAuth: {controller: 'rule' , method: 'storePartyAuth'}, // storePartyAuth
    updateRule: {controller: 'rule' , method: 'updateRule'}, // updateRule
};
 //ApplicationManager
let ApplicationManager = {
    __name: 'ApplicationManager',
    deleteApplication: {controller: 'ApplicationManager' , method: 'deleteApplication'}, // deleteApplication
    deleteApplicationNodes: {controller: 'ApplicationManager' , method: 'deleteApplicationNodes'}, // deleteApplicationNodes
    deleteApplications: {controller: 'ApplicationManager' , method: 'deleteApplications'}, // deleteApplications
    getApplication: {controller: 'ApplicationManager' , method: 'getApplication'}, // getApplication
    queryApplication: {controller: 'ApplicationManager' , method: 'queryApplication'}, // queryApplication
    queryApplicationTree: {controller: 'ApplicationManager' , method: 'queryApplicationTree'}, // queryApplicationTree
    queryApplicationTreeNode: {controller: 'ApplicationManager' , method: 'queryApplicationTreeNode'}, // queryApplicationTreeNode
    saveApplication: {controller: 'ApplicationManager' , method: 'saveApplication'}, // saveApplication
    test: {controller: 'ApplicationManager' , method: 'test'}, // test
    updateApplication: {controller: 'ApplicationManager' , method: 'updateApplication'}, // updateApplication
};
 //FuncGroupManager
let FuncGroupManager = {
    __name: 'FuncGroupManager',
    getFuncGroup: {controller: 'FuncGroupManager' , method: 'getFuncGroup'}, // getFuncGroup
    queryFuncGroup: {controller: 'FuncGroupManager' , method: 'queryFuncGroup'}, // queryFuncGroup
    querySubFuncGroup: {controller: 'FuncGroupManager' , method: 'querySubFuncGroup'}, // querySubFuncGroup
    saveFuncGroup: {controller: 'FuncGroupManager' , method: 'saveFuncGroup'}, // saveFuncGroup
    saveSubFuncGroup: {controller: 'FuncGroupManager' , method: 'saveSubFuncGroup'}, // saveSubFuncGroup
    updateFuncGroup: {controller: 'FuncGroupManager' , method: 'updateFuncGroup'}, // updateFuncGroup
    updateFuncGroupRelation: {controller: 'FuncGroupManager' , method: 'updateFuncGroupRelation'}, // updateFuncGroupRelation
};
 //FunctionAuth
let FunctionAuth = {
    __name: 'FunctionAuth',
    getFunctionAuthTree: {controller: 'FunctionAuth' , method: 'getFunctionAuthTree'}, // getFunctionAuthTree
    saveFunctionAuths: {controller: 'FunctionAuth' , method: 'saveFunctionAuths'}, // saveFunctionAuths
};
 //FunctionManager
let FunctionManager = {
    __name: 'FunctionManager',
    getFunction: {controller: 'FunctionManager' , method: 'getFunction'}, // getFunction
    queryFunction: {controller: 'FunctionManager' , method: 'queryFunction'}, // queryFunction
    saveFunction: {controller: 'FunctionManager' , method: 'saveFunction'}, // saveFunction
    updateFunction: {controller: 'FunctionManager' , method: 'updateFunction'}, // updateFunction
    validateFunction: {controller: 'FunctionManager' , method: 'validateFunction'}, // validateFunction
};
 //MenuManager
let MenuManager = {
    __name: 'MenuManager',
    deleteMenu: {controller: 'MenuManager' , method: 'deleteMenu'}, // deleteMenu
    deleteMenuNodes: {controller: 'MenuManager' , method: 'deleteMenuNodes'}, // deleteMenuNodes
    deleteMenus: {controller: 'MenuManager' , method: 'deleteMenus'}, // deleteMenus
    getMenu: {controller: 'MenuManager' , method: 'getMenu'}, // getMenu
    queryMenu: {controller: 'MenuManager' , method: 'queryMenu'}, // queryMenu
    queryMenuTreeNode: {controller: 'MenuManager' , method: 'queryMenuTreeNode'}, // queryMenuTreeNode
    saveMenu: {controller: 'MenuManager' , method: 'saveMenu'}, // saveMenu
    updateMenu: {controller: 'MenuManager' , method: 'updateMenu'}, // updateMenu
    updateMenuRelation: {controller: 'MenuManager' , method: 'updateMenuRelation'}, // updateMenuRelation
    validateMenu: {controller: 'MenuManager' , method: 'validateMenu'}, // validateMenu
};
 //authForParty
let authForParty = {
    __name: 'authForParty',
    storePartyAuth: {controller: 'authForParty' , method: 'storePartyAuth'}, // storePartyAuth
};
 //empgroup
let empgroup = {
    __name: 'empgroup',
    addEmpgroup: {controller: 'empgroup' , method: 'addEmpgroup'}, // addEmpgroup
    deleteEmpgroup: {controller: 'empgroup' , method: 'deleteEmpgroup'}, // deleteEmpgroup
    queryEmpInGroup: {controller: 'empgroup' , method: 'queryEmpInGroup'}, // queryEmpInGroup
};
 //employeeAuth
let employee = {
    __name: 'employee',
    QueryEmpAllowAddInGroup: {controller: 'employee' , method: 'QueryEmpAllowAddInGroup'}, // QueryEmpAllowAddInGroup
    addEmployee: {controller: 'employee' , method: 'addEmployee'}, // addEmployee
    deleteEmployee: {controller: 'employee' , method: 'deleteEmployee'}, // deleteEmployee
    getEmpAuthorizedRoles: {controller: 'employee' , method: 'getEmpAuthorizedRoles'}, // getEmpAuthorizedRoles
    getEmpManagedRoles: {controller: 'employee' , method: 'getEmpManagedRoles'}, // getEmpManagedRoles
    getEmpUnmanagedRoles: {controller: 'employee' , method: 'getEmpUnmanagedRoles'}, // getEmpUnmanagedRoles
    getEmployee: {controller: 'employee' , method: 'getEmployee'}, // getEmployee
    getEmployeeAuth: {controller: 'employee' , method: 'getEmployeeAuth'}, // getEmployeeAuth
    queryEmpAllowAddInPosition: {controller: 'employee' , method: 'queryEmpAllowAddInPosition'}, // queryEmpAllowAddInPosition
    queryEmpInPosition: {controller: 'employee' , method: 'queryEmpInPosition'}, // queryEmpInPosition
    queryEmpUsers: {controller: 'employee' , method: 'queryEmpUsers'}, // queryEmpUsers
    queryEmployee: {controller: 'employee' , method: 'queryEmployee'}, // queryEmployee
    updateEmpDetaiInfo: {controller: 'employee' , method: 'updateEmpDetaiInfo'}, // updateEmpDetaiInfo
    updateEmployee: {controller: 'employee' , method: 'updateEmployee'}, // updateEmployee
};
 //employeeAuth
let employeeAuth = {
    __name: 'employeeAuth',
    getEmpAuthorizedRoles: {controller: 'employeeAuth' , method: 'getEmpAuthorizedRoles'}, // getEmpAuthorizedRoles
    getEmpManagedRoles: {controller: 'employeeAuth' , method: 'getEmpManagedRoles'}, // getEmpManagedRoles
    getEmpUnmanagedRoles: {controller: 'employeeAuth' , method: 'getEmpUnmanagedRoles'}, // getEmpUnmanagedRoles
    getEmployeeAuth: {controller: 'employeeAuth' , method: 'getEmployeeAuth'}, // getEmployeeAuth
};
 //userselect
let group = {
    __name: 'group',
    addEmpgroup: {controller: 'group' , method: 'addEmpgroup'}, // addEmpgroup
    addGroup: {controller: 'group' , method: 'addGroup'}, // addGroup
    addGroupposi: {controller: 'group' , method: 'addGroupposi'}, // addGroupposi
    copyNode: {controller: 'group' , method: 'copyNode'}, // copyNode
    deleteCurrentNode: {controller: 'group' , method: 'deleteCurrentNode'}, // deleteCurrentNode
    deleteEmpgroup: {controller: 'group' , method: 'deleteEmpgroup'}, // deleteEmpgroup
    deleteNode: {controller: 'group' , method: 'deleteNode'}, // deleteNode
    deleteNodes: {controller: 'group' , method: 'deleteNodes'}, // deleteNodes
    getGroupAuth: {controller: 'group' , method: 'getGroupAuth'}, // getGroupAuth
    getGroupWithParent: {controller: 'group' , method: 'getGroupWithParent'}, // getGroupWithParent
    getManagedGroupByRoleId: {controller: 'group' , method: 'getManagedGroupByRoleId'}, // getManagedGroupByRoleId
    groupList: {controller: 'group' , method: 'groupList'}, // groupList
    groupUserList: {controller: 'group' , method: 'groupUserList'}, // groupUserList
    moveNode: {controller: 'group' , method: 'moveNode'}, // moveNode
    queryAllChildNodes: {controller: 'group' , method: 'queryAllChildNodes'}, // queryAllChildNodes
    queryEmpInGroup: {controller: 'group' , method: 'queryEmpInGroup'}, // queryEmpInGroup
    queryGroup: {controller: 'group' , method: 'queryGroup'}, // queryGroup
    queryGroupposi: {controller: 'group' , method: 'queryGroupposi'}, // queryGroupposi
    querySubGroup: {controller: 'group' , method: 'querySubGroup'}, // querySubGroup
    queryTreeChildNodes: {controller: 'group' , method: 'queryTreeChildNodes'}, // queryTreeChildNodes
    saveGroupAuth: {controller: 'group' , method: 'saveGroupAuth'}, // saveGroupAuth
    updateGroup: {controller: 'group' , method: 'updateGroup'}, // updateGroup
};
 //groupAuth
let groupAuth = {
    __name: 'groupAuth',
    getGroupAuth: {controller: 'groupAuth' , method: 'getGroupAuth'}, // getGroupAuth
    getManagedGroupByRoleId: {controller: 'groupAuth' , method: 'getManagedGroupByRoleId'}, // getManagedGroupByRoleId
    saveGroupAuth: {controller: 'groupAuth' , method: 'saveGroupAuth'}, // saveGroupAuth
};
 //groupposi
let groupposi = {
    __name: 'groupposi',
    addGroupposi: {controller: 'groupposi' , method: 'addGroupposi'}, // addGroupposi
    queryGroupposi: {controller: 'groupposi' , method: 'queryGroupposi'}, // queryGroupposi
};
 //organizationAuth
let organization = {
    __name: 'organization',
    addOrg: {controller: 'organization' , method: 'addOrg'}, // addOrg
    copyNode: {controller: 'organization' , method: 'copyNode'}, // copyNode
    deleteCurrentNode: {controller: 'organization' , method: 'deleteCurrentNode'}, // deleteCurrentNode
    deleteNode: {controller: 'organization' , method: 'deleteNode'}, // deleteNode
    deleteNodes: {controller: 'organization' , method: 'deleteNodes'}, // deleteNodes
    deleteOrg: {controller: 'organization' , method: 'deleteOrg'}, // deleteOrg
    getManagerOrgByRole: {controller: 'organization' , method: 'getManagerOrgByRole'}, // getManagerOrgByRole
    getOrgStaticTree: {controller: 'organization' , method: 'getOrgStaticTree'}, // getOrgStaticTree
    getOrgWithParent: {controller: 'organization' , method: 'getOrgWithParent'}, // getOrgWithParent
    getOrganizationAuth: {controller: 'organization' , method: 'getOrganizationAuth'}, // getOrganizationAuth
    moveNode: {controller: 'organization' , method: 'moveNode'}, // moveNode
    queryAll: {controller: 'organization' , method: 'queryAll'}, // queryAll
    queryAllChildNodes: {controller: 'organization' , method: 'queryAllChildNodes'}, // queryAllChildNodes
    queryOrg: {controller: 'organization' , method: 'queryOrg'}, // queryOrg
    queryTreeChildNodes: {controller: 'organization' , method: 'queryTreeChildNodes'}, // queryTreeChildNodes
    saveOrganizationAuth: {controller: 'organization' , method: 'saveOrganizationAuth'}, // saveOrganizationAuth
    updateOrg: {controller: 'organization' , method: 'updateOrg'}, // updateOrg
};
 //organizationAuth
let organizationAuth = {
    __name: 'organizationAuth',
    getManagerOrgByRole: {controller: 'organizationAuth' , method: 'getManagerOrgByRole'}, // getManagerOrgByRole
    getOrganizationAuth: {controller: 'organizationAuth' , method: 'getOrganizationAuth'}, // getOrganizationAuth
    saveOrganizationAuth: {controller: 'organizationAuth' , method: 'saveOrganizationAuth'}, // saveOrganizationAuth
};
 //positionAuth
let position = {
    __name: 'position',
    addEmpposition: {controller: 'position' , method: 'addEmpposition'}, // addEmpposition
    addPosition: {controller: 'position' , method: 'addPosition'}, // addPosition
    deleteEmpposition: {controller: 'position' , method: 'deleteEmpposition'}, // deleteEmpposition
    deletePosition: {controller: 'position' , method: 'deletePosition'}, // deletePosition
    getPositionAuth: {controller: 'position' , method: 'getPositionAuth'}, // getPositionAuth
    getPositionWithParent: {controller: 'position' , method: 'getPositionWithParent'}, // getPositionWithParent
    queryOrgNodes: {controller: 'position' , method: 'queryOrgNodes'}, // queryOrgNodes
    queryPosition: {controller: 'position' , method: 'queryPosition'}, // queryPosition
    updatePosition: {controller: 'position' , method: 'updatePosition'}, // updatePosition
};
 //positionAuth
let positionAuth = {
    __name: 'positionAuth',
    getPositionAuth: {controller: 'positionAuth' , method: 'getPositionAuth'}, // getPositionAuth
};
 //deptselect
let deptselect = {
    __name: 'deptselect',
    deptChildList: {controller: 'deptselect' , method: 'deptChildList'}, // deptChildList
    deptList: {controller: 'deptselect' , method: 'deptList'}, // deptList
    queryOrgsByEmpId: {controller: 'deptselect' , method: 'queryOrgsByEmpId'}, // queryOrgsByEmpId
    queryOrgsByName: {controller: 'deptselect' , method: 'queryOrgsByName'}, // queryOrgsByName
    recentDeptList: {controller: 'deptselect' , method: 'recentDeptList'}, // recentDeptList
};
 //groupselect
let groupselect = {
    __name: 'groupselect',
    groupList: {controller: 'groupselect' , method: 'groupList'}, // groupList
};
 //recentvisit
let recentvisit = {
    __name: 'recentvisit',
    add: {controller: 'recentvisit' , method: 'add'}, // add
};
 //roleselect
let roleselect = {
    __name: 'roleselect',
    roleList: {controller: 'roleselect' , method: 'roleList'}, // roleList
    roleListWithPage: {controller: 'roleselect' , method: 'roleListWithPage'}, // roleListWithPage
};
 //userselect
let userselect = {
    __name: 'userselect',
    deptUserList: {controller: 'userselect' , method: 'deptUserList'}, // deptUserList
    groupUserList: {controller: 'userselect' , method: 'groupUserList'}, // groupUserList
    onlineUserList: {controller: 'userselect' , method: 'onlineUserList'}, // onlineUserList
    queryUserListByName: {controller: 'userselect' , method: 'queryUserListByName'}, // queryUserListByName
    recentUserList: {controller: 'userselect' , method: 'recentUserList'}, // recentUserList
    roleUserList: {controller: 'userselect' , method: 'roleUserList'}, // roleUserList
};
 //ipRuleComponent
let ipRuleComponent = {
    __name: 'ipRuleComponent',
    deleteAccessRules: {controller: 'ipRuleComponent' , method: 'deleteAccessRules'}, // deleteAccessRules
    editAccessRules: {controller: 'ipRuleComponent' , method: 'editAccessRules'}, // editAccessRules
    getAccessRules: {controller: 'ipRuleComponent' , method: 'getAccessRules'}, // getAccessRules
    verificationIp: {controller: 'ipRuleComponent' , method: 'verificationIp'}, // verificationIp
};
 //PartyManager
let PartyManager = {
    __name: 'PartyManager',
    queryPartyWithPartyId: {controller: 'PartyManager' , method: 'queryPartyWithPartyId'}, // queryPartyWithPartyId
    saveParty: {controller: 'PartyManager' , method: 'saveParty'}, // saveParty
};
 //RoleManager
let RoleManager = {
    __name: 'RoleManager',
    addRole: {controller: 'RoleManager' , method: 'addRole'}, // addRole
    checkRoleExist: {controller: 'RoleManager' , method: 'checkRoleExist'}, // checkRoleExist
    queryAuthorizedRole: {controller: 'RoleManager' , method: 'queryAuthorizedRole'}, // queryAuthorizedRole
    queryRole: {controller: 'RoleManager' , method: 'queryRole'}, // queryRole
    removeRoles: {controller: 'RoleManager' , method: 'removeRoles'}, // removeRoles
    updateRole: {controller: 'RoleManager' , method: 'updateRole'}, // updateRole
};
 //UserManager
let UserManager = {
    __name: 'UserManager',
    addUser: {controller: 'UserManager' , method: 'addUser'}, // addUser
    checkPassword: {controller: 'UserManager' , method: 'checkPassword'}, // checkPassword
    checkUser: {controller: 'UserManager' , method: 'checkUser'}, // checkUser
    deleteUser: {controller: 'UserManager' , method: 'deleteUser'}, // deleteUser
    getCapUser: {controller: 'UserManager' , method: 'getCapUser'}, // getCapUser
    getUser: {controller: 'UserManager' , method: 'getUser'}, // getUser
    queryDefaultUser: {controller: 'UserManager' , method: 'queryDefaultUser'}, // queryDefaultUser
    queryUser: {controller: 'UserManager' , method: 'queryUser'}, // queryUser
    updatePasswords: {controller: 'UserManager' , method: 'updatePasswords'}, // updatePasswords
    updateUser: {controller: 'UserManager' , method: 'updateUser'}, // updateUser
    updateUserPassword: {controller: 'UserManager' , method: 'updateUserPassword'}, // updateUserPassword
};
 //win7Service
let win7Service = {
    __name: 'win7Service',
    addUserBg: {controller: 'win7Service' , method: 'addUserBg'}, // addUserBg
    delUserBg: {controller: 'win7Service' , method: 'delUserBg'}, // delUserBg
    getMyConfig: {controller: 'win7Service' , method: 'getMyConfig'}, // getMyConfig
    getUserBg: {controller: 'win7Service' , method: 'getUserBg'}, // getUserBg
    setUserBg: {controller: 'win7Service' , method: 'setUserBg'}, // setUserBg
    updateAutoStartConfig: {controller: 'win7Service' , method: 'updateAutoStartConfig'}, // updateAutoStartConfig
    updateDesktopConfig: {controller: 'win7Service' , method: 'updateDesktopConfig'}, // updateDesktopConfig
    updateIconsConfig: {controller: 'win7Service' , method: 'updateIconsConfig'}, // updateIconsConfig
};

export {
    DictApiController,
    AuthApiController,
    BarberControllerImpl,
    PipeReportController,
    HealthApiController,
    CulturalControllerImpl,
    ScheduleControllerImpl,
    HelpControllerImpl,
    WorkCartControllerImpl,
    fileupload,
    agent,
    process,
    task,
    web,
    LoginManager,
    TenantServiceManager,
    service,
    ManageableRes,
    partyauth,
    TenantManager,
    DictManager,
    entity,
    rule,
    ApplicationManager,
    FuncGroupManager,
    FunctionAuth,
    FunctionManager,
    MenuManager,
    authForParty,
    empgroup,
    employee,
    employeeAuth,
    group,
    groupAuth,
    groupposi,
    organization,
    organizationAuth,
    position,
    positionAuth,
    deptselect,
    groupselect,
    recentvisit,
    roleselect,
    userselect,
    ipRuleComponent,
    PartyManager,
    RoleManager,
    UserManager,
    win7Service,
};
