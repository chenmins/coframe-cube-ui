//This file is automatically generated

 //fileupload
let fileuploadloadFiles = {
    __name: 'fileuploadloadFiles',
    fileuploadloadFiles: {controller: 'fileuploadloadFiles' , method: 'fileuploadloadFiles'}, // loadFiles
};
 //agent
let agentaddAgent = {
    __name: 'agentaddAgent',
    agentaddAgent: {controller: 'agentaddAgent' , method: 'agentaddAgent'}, // addAgent
};
 //agent
let agentdeleteAgent = {
    __name: 'agentdeleteAgent',
    agentdeleteAgent: {controller: 'agentdeleteAgent' , method: 'agentdeleteAgent'}, // deleteAgent
};
 //agent
let agentdetailAgent = {
    __name: 'agentdetailAgent',
    agentdetailAgent: {controller: 'agentdetailAgent' , method: 'agentdetailAgent'}, // detailAgent
};
 //agent
let agentmodifyAgent = {
    __name: 'agentmodifyAgent',
    agentmodifyAgent: {controller: 'agentmodifyAgent' , method: 'agentmodifyAgent'}, // modifyAgent
};
 //agent
let agentgetProActInfo = {
    __name: 'agentgetProActInfo',
    agentgetProActInfo: {controller: 'agentgetProActInfo' , method: 'agentgetProActInfo'}, // getProActInfo
};
 //agent
let agentqueryAgent = {
    __name: 'agentqueryAgent',
    agentqueryAgent: {controller: 'agentqueryAgent' , method: 'agentqueryAgent'}, // queryAgent
};
 //agent
let agentqueryAgentInfo = {
    __name: 'agentqueryAgentInfo',
    agentqueryAgentInfo: {controller: 'agentqueryAgentInfo' , method: 'agentqueryAgentInfo'}, // queryAgentInfo
};
 //agent
let agentqueryMyAgent = {
    __name: 'agentqueryMyAgent',
    agentqueryMyAgent: {controller: 'agentqueryMyAgent' , method: 'agentqueryMyAgent'}, // queryMyAgent
};
 //agent
let agentqueryProActInfo = {
    __name: 'agentqueryProActInfo',
    agentqueryProActInfo: {controller: 'agentqueryProActInfo' , method: 'agentqueryProActInfo'}, // queryProActInfo
};
 //process
let processcommonQueryProcessInst = {
    __name: 'processcommonQueryProcessInst',
    processcommonQueryProcessInst: {controller: 'processcommonQueryProcessInst' , method: 'processcommonQueryProcessInst'}, // commonQueryProcessInst
};
 //process
let processqueryMyProcess = {
    __name: 'processqueryMyProcess',
    processqueryMyProcess: {controller: 'processqueryMyProcess' , method: 'processqueryMyProcess'}, // queryMyProcess
};
 //process
let processqueryProcess = {
    __name: 'processqueryProcess',
    processqueryProcess: {controller: 'processqueryProcess' , method: 'processqueryProcess'}, // queryProcess
};
 //process
let processgetCatalogSubByUserid = {
    __name: 'processgetCatalogSubByUserid',
    processgetCatalogSubByUserid: {controller: 'processgetCatalogSubByUserid' , method: 'processgetCatalogSubByUserid'}, // getCatalogSubByUserid
};
 //process
let processgetProcessCatalogs = {
    __name: 'processgetProcessCatalogs',
    processgetProcessCatalogs: {controller: 'processgetProcessCatalogs' , method: 'processgetProcessCatalogs'}, // getProcessCatalogs
};
 //process
let processcreateStartProcessInst = {
    __name: 'processcreateStartProcessInst',
    processcreateStartProcessInst: {controller: 'processcreateStartProcessInst' , method: 'processcreateStartProcessInst'}, // createStartProcessInst
};
 //process
let processqueryPublishedProcessWithCatalog = {
    __name: 'processqueryPublishedProcessWithCatalog',
    processqueryPublishedProcessWithCatalog: {controller: 'processqueryPublishedProcessWithCatalog' , method: 'processqueryPublishedProcessWithCatalog'}, // queryPublishedProcessWithCatalog
};
 //task
let taskconfrimNotification = {
    __name: 'taskconfrimNotification',
    taskconfrimNotification: {controller: 'taskconfrimNotification' , method: 'taskconfrimNotification'}, // confrimNotification
};
 //task
let taskqueryNotificationList = {
    __name: 'taskqueryNotificationList',
    taskqueryNotificationList: {controller: 'taskqueryNotificationList' , method: 'taskqueryNotificationList'}, // queryNotificationList
};
 //task
let taskexecuteWorkItem = {
    __name: 'taskexecuteWorkItem',
    taskexecuteWorkItem: {controller: 'taskexecuteWorkItem' , method: 'taskexecuteWorkItem'}, // executeWorkItem
};
 //task
let taskopenBizform = {
    __name: 'taskopenBizform',
    taskopenBizform: {controller: 'taskopenBizform' , method: 'taskopenBizform'}, // openBizform
};
 //task
let taskqueryTaskList = {
    __name: 'taskqueryTaskList',
    taskqueryTaskList: {controller: 'taskqueryTaskList' , method: 'taskqueryTaskList'}, // queryTaskList
};
 //web
let webappointActivities4Freeflow = {
    __name: 'webappointActivities4Freeflow',
    webappointActivities4Freeflow: {controller: 'webappointActivities4Freeflow' , method: 'webappointActivities4Freeflow'}, // appointActivities4Freeflow
};
 //web
let webappointParticipants4StepActivity = {
    __name: 'webappointParticipants4StepActivity',
    webappointParticipants4StepActivity: {controller: 'webappointParticipants4StepActivity' , method: 'webappointParticipants4StepActivity'}, // appointParticipants4StepActivity
};
 //web
let webfetchMessageList = {
    __name: 'webfetchMessageList',
    webfetchMessageList: {controller: 'webfetchMessageList' , method: 'webfetchMessageList'}, // fetchMessageList
};
 //web
let webgetActivitesNeedAppointParticipant = {
    __name: 'webgetActivitesNeedAppointParticipant',
    webgetActivitesNeedAppointParticipant: {controller: 'webgetActivitesNeedAppointParticipant' , method: 'webgetActivitesNeedAppointParticipant'}, // getActivitesNeedAppointParticipant
};
 //web
let webgetAppointActivityType = {
    __name: 'webgetAppointActivityType',
    webgetAppointActivityType: {controller: 'webgetAppointActivityType' , method: 'webgetAppointActivityType'}, // getAppointActivityType
};
 //web
let webgetProcessGraph = {
    __name: 'webgetProcessGraph',
    webgetProcessGraph: {controller: 'webgetProcessGraph' , method: 'webgetProcessGraph'}, // getProcessGraph
};
 //web
let webgetWorkItemForm = {
    __name: 'webgetWorkItemForm',
    webgetWorkItemForm: {controller: 'webgetWorkItemForm' , method: 'webgetWorkItemForm'}, // getWorkItemForm
};
 //web
let webgetWorkItemsByProcInstId = {
    __name: 'webgetWorkItemsByProcInstId',
    webgetWorkItemsByProcInstId: {controller: 'webgetWorkItemsByProcInstId' , method: 'webgetWorkItemsByProcInstId'}, // getWorkItemsByProcInstId
};
 //web
let webisActivitiesAppointed = {
    __name: 'webisActivitiesAppointed',
    webisActivitiesAppointed: {controller: 'webisActivitiesAppointed' , method: 'webisActivitiesAppointed'}, // isActivitiesAppointed
};
 //web
let webqueryAnnotateListByProcessInstID = {
    __name: 'webqueryAnnotateListByProcessInstID',
    webqueryAnnotateListByProcessInstID: {controller: 'webqueryAnnotateListByProcessInstID' , method: 'webqueryAnnotateListByProcessInstID'}, // queryAnnotateListByProcessInstID
};
 //web
let webqueryAnnotateListByTaskID = {
    __name: 'webqueryAnnotateListByTaskID',
    webqueryAnnotateListByTaskID: {controller: 'webqueryAnnotateListByTaskID' , method: 'webqueryAnnotateListByTaskID'}, // queryAnnotateListByTaskID
};
 //web
let webqueryParticipants = {
    __name: 'webqueryParticipants',
    webqueryParticipants: {controller: 'webqueryParticipants' , method: 'webqueryParticipants'}, // queryParticipants
};
 //web
let webqueryPressListByProcessInstID = {
    __name: 'webqueryPressListByProcessInstID',
    webqueryPressListByProcessInstID: {controller: 'webqueryPressListByProcessInstID' , method: 'webqueryPressListByProcessInstID'}, // queryPressListByProcessInstID
};
 //web
let webqueryPressListByTaskID = {
    __name: 'webqueryPressListByTaskID',
    webqueryPressListByTaskID: {controller: 'webqueryPressListByTaskID' , method: 'webqueryPressListByTaskID'}, // queryPressListByTaskID
};
 //web
let webqueryProcessAndActivity = {
    __name: 'webqueryProcessAndActivity',
    webqueryProcessAndActivity: {controller: 'webqueryProcessAndActivity' , method: 'webqueryProcessAndActivity'}, // queryProcessAndActivity
};
 //web
let webqueryStepActivities = {
    __name: 'webqueryStepActivities',
    webqueryStepActivities: {controller: 'webqueryStepActivities' , method: 'webqueryStepActivities'}, // queryStepActivities
};
 //web
let websearchParticipants = {
    __name: 'websearchParticipants',
    websearchParticipants: {controller: 'websearchParticipants' , method: 'websearchParticipants'}, // searchParticipants
};
 //LoginManager
let LoginManagerauthentication = {
    __name: 'LoginManagerauthentication',
    LoginManagerauthentication: {controller: 'LoginManagerauthentication' , method: 'LoginManagerauthentication'}, // authentication
};
 //LoginManager
let LoginManagergetCasInfo = {
    __name: 'LoginManagergetCasInfo',
    LoginManagergetCasInfo: {controller: 'LoginManagergetCasInfo' , method: 'LoginManagergetCasInfo'}, // getCasInfo
};
 //LoginManager
let LoginManagergetMenuData = {
    __name: 'LoginManagergetMenuData',
    LoginManagergetMenuData: {controller: 'LoginManagergetMenuData' , method: 'LoginManagergetMenuData'}, // getMenuData
};
 //LoginManager
let LoginManagergetMenuList = {
    __name: 'LoginManagergetMenuList',
    LoginManagergetMenuList: {controller: 'LoginManagergetMenuList' , method: 'LoginManagergetMenuList'}, // getMenuList
};
 //LoginManager
let LoginManagergetUserIdAndName = {
    __name: 'LoginManagergetUserIdAndName',
    LoginManagergetUserIdAndName: {controller: 'LoginManagergetUserIdAndName' , method: 'LoginManagergetUserIdAndName'}, // getUserIdAndName
};
 //LoginManager
let LoginManagergetUserPool = {
    __name: 'LoginManagergetUserPool',
    LoginManagergetUserPool: {controller: 'LoginManagergetUserPool' , method: 'LoginManagergetUserPool'}, // getUserPool
};
 //LoginManager
let LoginManagerisend = {
    __name: 'LoginManagerisend',
    LoginManagerisend: {controller: 'LoginManagerisend' , method: 'LoginManagerisend'}, // isend
};
 //LoginManager
let LoginManagerlogin = {
    __name: 'LoginManagerlogin',
    LoginManagerlogin: {controller: 'LoginManagerlogin' , method: 'LoginManagerlogin'}, // login
};
 //LoginManager
let LoginManagerlogout = {
    __name: 'LoginManagerlogout',
    LoginManagerlogout: {controller: 'LoginManagerlogout' , method: 'LoginManagerlogout'}, // logout
};
 //LoginManager
let LoginManagersyncUserInfo = {
    __name: 'LoginManagersyncUserInfo',
    LoginManagersyncUserInfo: {controller: 'LoginManagersyncUserInfo' , method: 'LoginManagersyncUserInfo'}, // syncUserInfo
};
 //TenantServiceManager
let TenantServiceManagerchangeTenant = {
    __name: 'TenantServiceManagerchangeTenant',
    TenantServiceManagerchangeTenant: {controller: 'TenantServiceManagerchangeTenant' , method: 'TenantServiceManagerchangeTenant'}, // changeTenant
};
 //TenantServiceManager
let TenantServiceManagercheckChangeTenant = {
    __name: 'TenantServiceManagercheckChangeTenant',
    TenantServiceManagercheckChangeTenant: {controller: 'TenantServiceManagercheckChangeTenant' , method: 'TenantServiceManagercheckChangeTenant'}, // checkChangeTenant
};
 //service
let servicegetFunctionMenuGraph = {
    __name: 'servicegetFunctionMenuGraph',
    servicegetFunctionMenuGraph: {controller: 'servicegetFunctionMenuGraph' , method: 'servicegetFunctionMenuGraph'}, // getFunctionMenuGraph
};
 //service
let servicegetPartyAuthGraph = {
    __name: 'servicegetPartyAuthGraph',
    servicegetPartyAuthGraph: {controller: 'servicegetPartyAuthGraph' , method: 'servicegetPartyAuthGraph'}, // getPartyAuthGraph
};
 //ManageableRes
let ManageableResgetManageableGroup = {
    __name: 'ManageableResgetManageableGroup',
    ManageableResgetManageableGroup: {controller: 'ManageableResgetManageableGroup' , method: 'ManageableResgetManageableGroup'}, // getManageableGroup
};
 //ManageableRes
let ManageableResgetManageableOrg = {
    __name: 'ManageableResgetManageableOrg',
    ManageableResgetManageableOrg: {controller: 'ManageableResgetManageableOrg' , method: 'ManageableResgetManageableOrg'}, // getManageableOrg
};
 //partyauth
let partyauthaddPartyAuth = {
    __name: 'partyauthaddPartyAuth',
    partyauthaddPartyAuth: {controller: 'partyauthaddPartyAuth' , method: 'partyauthaddPartyAuth'}, // addPartyAuth
};
 //partyauth
let partyauthdeletePartyAuth = {
    __name: 'partyauthdeletePartyAuth',
    partyauthdeletePartyAuth: {controller: 'partyauthdeletePartyAuth' , method: 'partyauthdeletePartyAuth'}, // deletePartyAuth
};
 //partyauth
let partyauthgetAuthorizedRoleList = {
    __name: 'partyauthgetAuthorizedRoleList',
    partyauthgetAuthorizedRoleList: {controller: 'partyauthgetAuthorizedRoleList' , method: 'partyauthgetAuthorizedRoleList'}, // getAuthorizedRoleList
};
 //partyauth
let partyauthgetUnauthorizedRoleList = {
    __name: 'partyauthgetUnauthorizedRoleList',
    partyauthgetUnauthorizedRoleList: {controller: 'partyauthgetUnauthorizedRoleList' , method: 'partyauthgetUnauthorizedRoleList'}, // getUnauthorizedRoleList
};
 //TenantManager
let TenantManageraddTenant = {
    __name: 'TenantManageraddTenant',
    TenantManageraddTenant: {controller: 'TenantManageraddTenant' , method: 'TenantManageraddTenant'}, // addTenant
};
 //TenantManager
let TenantManagerdeleteTenants = {
    __name: 'TenantManagerdeleteTenants',
    TenantManagerdeleteTenants: {controller: 'TenantManagerdeleteTenants' , method: 'TenantManagerdeleteTenants'}, // deleteTenants
};
 //TenantManager
let TenantManagerqueryTenants = {
    __name: 'TenantManagerqueryTenants',
    TenantManagerqueryTenants: {controller: 'TenantManagerqueryTenants' , method: 'TenantManagerqueryTenants'}, // queryTenants
};
 //TenantManager
let TenantManagerupdateTenant = {
    __name: 'TenantManagerupdateTenant',
    TenantManagerupdateTenant: {controller: 'TenantManagerupdateTenant' , method: 'TenantManagerupdateTenant'}, // updateTenant
};
 //DictManager
let DictManagerexportDict = {
    __name: 'DictManagerexportDict',
    DictManagerexportDict: {controller: 'DictManagerexportDict' , method: 'DictManagerexportDict'}, // exportDict
};
 //DictManager
let DictManagerimportDict = {
    __name: 'DictManagerimportDict',
    DictManagerimportDict: {controller: 'DictManagerimportDict' , method: 'DictManagerimportDict'}, // importDict
};
 //DictManager
let DictManagerqueryDict = {
    __name: 'DictManagerqueryDict',
    DictManagerqueryDict: {controller: 'DictManagerqueryDict' , method: 'DictManagerqueryDict'}, // queryDict
};
 //DictManager
let DictManagerqueryDictType = {
    __name: 'DictManagerqueryDictType',
    DictManagerqueryDictType: {controller: 'DictManagerqueryDictType' , method: 'DictManagerqueryDictType'}, // queryDictType
};
 //DictManager
let DictManagerrefreshDictCache = {
    __name: 'DictManagerrefreshDictCache',
    DictManagerrefreshDictCache: {controller: 'DictManagerrefreshDictCache' , method: 'DictManagerrefreshDictCache'}, // refreshDictCache
};
 //DictManager
let DictManagerremoveDict = {
    __name: 'DictManagerremoveDict',
    DictManagerremoveDict: {controller: 'DictManagerremoveDict' , method: 'DictManagerremoveDict'}, // removeDict
};
 //DictManager
let DictManagerremoveDictType = {
    __name: 'DictManagerremoveDictType',
    DictManagerremoveDictType: {controller: 'DictManagerremoveDictType' , method: 'DictManagerremoveDictType'}, // removeDictType
};
 //DictManager
let DictManagerremoveDictTypeCascade = {
    __name: 'DictManagerremoveDictTypeCascade',
    DictManagerremoveDictTypeCascade: {controller: 'DictManagerremoveDictTypeCascade' , method: 'DictManagerremoveDictTypeCascade'}, // removeDictTypeCascade
};
 //DictManager
let DictManagersaveDict = {
    __name: 'DictManagersaveDict',
    DictManagersaveDict: {controller: 'DictManagersaveDict' , method: 'DictManagersaveDict'}, // saveDict
};
 //DictManager
let DictManagersaveDictType = {
    __name: 'DictManagersaveDictType',
    DictManagersaveDictType: {controller: 'DictManagersaveDictType' , method: 'DictManagersaveDictType'}, // saveDictType
};
 //entity
let entitygetEntityInfoPropertie = {
    __name: 'entitygetEntityInfoPropertie',
    entitygetEntityInfoPropertie: {controller: 'entitygetEntityInfoPropertie' , method: 'entitygetEntityInfoPropertie'}, // getEntityInfoPropertie
};
 //entity
let entitygetEntityInfoProperties = {
    __name: 'entitygetEntityInfoProperties',
    entitygetEntityInfoProperties: {controller: 'entitygetEntityInfoProperties' , method: 'entitygetEntityInfoProperties'}, // getEntityInfoProperties
};
 //entity
let entitygetEntityInfos = {
    __name: 'entitygetEntityInfos',
    entitygetEntityInfos: {controller: 'entitygetEntityInfos' , method: 'entitygetEntityInfos'}, // getEntityInfos
};
 //rule
let ruledelRules = {
    __name: 'ruledelRules',
    ruledelRules: {controller: 'ruledelRules' , method: 'ruledelRules'}, // delRules
};
 //rule
let rulegetConValues = {
    __name: 'rulegetConValues',
    rulegetConValues: {controller: 'rulegetConValues' , method: 'rulegetConValues'}, // getConValues
};
 //rule
let rulegetEntityCapRules = {
    __name: 'rulegetEntityCapRules',
    rulegetEntityCapRules: {controller: 'rulegetEntityCapRules' , method: 'rulegetEntityCapRules'}, // getEntityCapRules
};
 //rule
let rulegetRightValues = {
    __name: 'rulegetRightValues',
    rulegetRightValues: {controller: 'rulegetRightValues' , method: 'rulegetRightValues'}, // getRightValues
};
 //rule
let rulegetRuleCondition = {
    __name: 'rulegetRuleCondition',
    rulegetRuleCondition: {controller: 'rulegetRuleCondition' , method: 'rulegetRuleCondition'}, // getRuleCondition
};
 //rule
let rulesaveRule = {
    __name: 'rulesaveRule',
    rulesaveRule: {controller: 'rulesaveRule' , method: 'rulesaveRule'}, // saveRule
};
 //rule
let rulestorePartyAuth = {
    __name: 'rulestorePartyAuth',
    rulestorePartyAuth: {controller: 'rulestorePartyAuth' , method: 'rulestorePartyAuth'}, // storePartyAuth
};
 //rule
let ruleupdateRule = {
    __name: 'ruleupdateRule',
    ruleupdateRule: {controller: 'ruleupdateRule' , method: 'ruleupdateRule'}, // updateRule
};
 //ApplicationManager
let ApplicationManagerdeleteApplication = {
    __name: 'ApplicationManagerdeleteApplication',
    ApplicationManagerdeleteApplication: {controller: 'ApplicationManagerdeleteApplication' , method: 'ApplicationManagerdeleteApplication'}, // deleteApplication
};
 //ApplicationManager
let ApplicationManagerdeleteApplicationNodes = {
    __name: 'ApplicationManagerdeleteApplicationNodes',
    ApplicationManagerdeleteApplicationNodes: {controller: 'ApplicationManagerdeleteApplicationNodes' , method: 'ApplicationManagerdeleteApplicationNodes'}, // deleteApplicationNodes
};
 //ApplicationManager
let ApplicationManagerdeleteApplications = {
    __name: 'ApplicationManagerdeleteApplications',
    ApplicationManagerdeleteApplications: {controller: 'ApplicationManagerdeleteApplications' , method: 'ApplicationManagerdeleteApplications'}, // deleteApplications
};
 //ApplicationManager
let ApplicationManagergetApplication = {
    __name: 'ApplicationManagergetApplication',
    ApplicationManagergetApplication: {controller: 'ApplicationManagergetApplication' , method: 'ApplicationManagergetApplication'}, // getApplication
};
 //ApplicationManager
let ApplicationManagerqueryApplication = {
    __name: 'ApplicationManagerqueryApplication',
    ApplicationManagerqueryApplication: {controller: 'ApplicationManagerqueryApplication' , method: 'ApplicationManagerqueryApplication'}, // queryApplication
};
 //ApplicationManager
let ApplicationManagerqueryApplicationTree = {
    __name: 'ApplicationManagerqueryApplicationTree',
    ApplicationManagerqueryApplicationTree: {controller: 'ApplicationManagerqueryApplicationTree' , method: 'ApplicationManagerqueryApplicationTree'}, // queryApplicationTree
};
 //ApplicationManager
let ApplicationManagerqueryApplicationTreeNode = {
    __name: 'ApplicationManagerqueryApplicationTreeNode',
    ApplicationManagerqueryApplicationTreeNode: {controller: 'ApplicationManagerqueryApplicationTreeNode' , method: 'ApplicationManagerqueryApplicationTreeNode'}, // queryApplicationTreeNode
};
 //ApplicationManager
let ApplicationManagersaveApplication = {
    __name: 'ApplicationManagersaveApplication',
    ApplicationManagersaveApplication: {controller: 'ApplicationManagersaveApplication' , method: 'ApplicationManagersaveApplication'}, // saveApplication
};
 //ApplicationManager
let ApplicationManagertest = {
    __name: 'ApplicationManagertest',
    ApplicationManagertest: {controller: 'ApplicationManagertest' , method: 'ApplicationManagertest'}, // test
};
 //ApplicationManager
let ApplicationManagerupdateApplication = {
    __name: 'ApplicationManagerupdateApplication',
    ApplicationManagerupdateApplication: {controller: 'ApplicationManagerupdateApplication' , method: 'ApplicationManagerupdateApplication'}, // updateApplication
};
 //FuncGroupManager
let FuncGroupManagergetFuncGroup = {
    __name: 'FuncGroupManagergetFuncGroup',
    FuncGroupManagergetFuncGroup: {controller: 'FuncGroupManagergetFuncGroup' , method: 'FuncGroupManagergetFuncGroup'}, // getFuncGroup
};
 //FuncGroupManager
let FuncGroupManagerqueryFuncGroup = {
    __name: 'FuncGroupManagerqueryFuncGroup',
    FuncGroupManagerqueryFuncGroup: {controller: 'FuncGroupManagerqueryFuncGroup' , method: 'FuncGroupManagerqueryFuncGroup'}, // queryFuncGroup
};
 //FuncGroupManager
let FuncGroupManagerquerySubFuncGroup = {
    __name: 'FuncGroupManagerquerySubFuncGroup',
    FuncGroupManagerquerySubFuncGroup: {controller: 'FuncGroupManagerquerySubFuncGroup' , method: 'FuncGroupManagerquerySubFuncGroup'}, // querySubFuncGroup
};
 //FuncGroupManager
let FuncGroupManagersaveFuncGroup = {
    __name: 'FuncGroupManagersaveFuncGroup',
    FuncGroupManagersaveFuncGroup: {controller: 'FuncGroupManagersaveFuncGroup' , method: 'FuncGroupManagersaveFuncGroup'}, // saveFuncGroup
};
 //FuncGroupManager
let FuncGroupManagersaveSubFuncGroup = {
    __name: 'FuncGroupManagersaveSubFuncGroup',
    FuncGroupManagersaveSubFuncGroup: {controller: 'FuncGroupManagersaveSubFuncGroup' , method: 'FuncGroupManagersaveSubFuncGroup'}, // saveSubFuncGroup
};
 //FuncGroupManager
let FuncGroupManagerupdateFuncGroup = {
    __name: 'FuncGroupManagerupdateFuncGroup',
    FuncGroupManagerupdateFuncGroup: {controller: 'FuncGroupManagerupdateFuncGroup' , method: 'FuncGroupManagerupdateFuncGroup'}, // updateFuncGroup
};
 //FuncGroupManager
let FuncGroupManagerupdateFuncGroupRelation = {
    __name: 'FuncGroupManagerupdateFuncGroupRelation',
    FuncGroupManagerupdateFuncGroupRelation: {controller: 'FuncGroupManagerupdateFuncGroupRelation' , method: 'FuncGroupManagerupdateFuncGroupRelation'}, // updateFuncGroupRelation
};
 //FunctionAuth
let FunctionAuthgetFunctionAuthTree = {
    __name: 'FunctionAuthgetFunctionAuthTree',
    FunctionAuthgetFunctionAuthTree: {controller: 'FunctionAuthgetFunctionAuthTree' , method: 'FunctionAuthgetFunctionAuthTree'}, // getFunctionAuthTree
};
 //FunctionAuth
let FunctionAuthsaveFunctionAuths = {
    __name: 'FunctionAuthsaveFunctionAuths',
    FunctionAuthsaveFunctionAuths: {controller: 'FunctionAuthsaveFunctionAuths' , method: 'FunctionAuthsaveFunctionAuths'}, // saveFunctionAuths
};
 //FunctionManager
let FunctionManagergetFunction = {
    __name: 'FunctionManagergetFunction',
    FunctionManagergetFunction: {controller: 'FunctionManagergetFunction' , method: 'FunctionManagergetFunction'}, // getFunction
};
 //FunctionManager
let FunctionManagerqueryFunction = {
    __name: 'FunctionManagerqueryFunction',
    FunctionManagerqueryFunction: {controller: 'FunctionManagerqueryFunction' , method: 'FunctionManagerqueryFunction'}, // queryFunction
};
 //FunctionManager
let FunctionManagersaveFunction = {
    __name: 'FunctionManagersaveFunction',
    FunctionManagersaveFunction: {controller: 'FunctionManagersaveFunction' , method: 'FunctionManagersaveFunction'}, // saveFunction
};
 //FunctionManager
let FunctionManagerupdateFunction = {
    __name: 'FunctionManagerupdateFunction',
    FunctionManagerupdateFunction: {controller: 'FunctionManagerupdateFunction' , method: 'FunctionManagerupdateFunction'}, // updateFunction
};
 //FunctionManager
let FunctionManagervalidateFunction = {
    __name: 'FunctionManagervalidateFunction',
    FunctionManagervalidateFunction: {controller: 'FunctionManagervalidateFunction' , method: 'FunctionManagervalidateFunction'}, // validateFunction
};
 //MenuManager
let MenuManagerdeleteMenu = {
    __name: 'MenuManagerdeleteMenu',
    MenuManagerdeleteMenu: {controller: 'MenuManagerdeleteMenu' , method: 'MenuManagerdeleteMenu'}, // deleteMenu
};
 //MenuManager
let MenuManagerdeleteMenuNodes = {
    __name: 'MenuManagerdeleteMenuNodes',
    MenuManagerdeleteMenuNodes: {controller: 'MenuManagerdeleteMenuNodes' , method: 'MenuManagerdeleteMenuNodes'}, // deleteMenuNodes
};
 //MenuManager
let MenuManagerdeleteMenus = {
    __name: 'MenuManagerdeleteMenus',
    MenuManagerdeleteMenus: {controller: 'MenuManagerdeleteMenus' , method: 'MenuManagerdeleteMenus'}, // deleteMenus
};
 //MenuManager
let MenuManagergetMenu = {
    __name: 'MenuManagergetMenu',
    MenuManagergetMenu: {controller: 'MenuManagergetMenu' , method: 'MenuManagergetMenu'}, // getMenu
};
 //MenuManager
let MenuManagerqueryMenu = {
    __name: 'MenuManagerqueryMenu',
    MenuManagerqueryMenu: {controller: 'MenuManagerqueryMenu' , method: 'MenuManagerqueryMenu'}, // queryMenu
};
 //MenuManager
let MenuManagerqueryMenuTreeNode = {
    __name: 'MenuManagerqueryMenuTreeNode',
    MenuManagerqueryMenuTreeNode: {controller: 'MenuManagerqueryMenuTreeNode' , method: 'MenuManagerqueryMenuTreeNode'}, // queryMenuTreeNode
};
 //MenuManager
let MenuManagersaveMenu = {
    __name: 'MenuManagersaveMenu',
    MenuManagersaveMenu: {controller: 'MenuManagersaveMenu' , method: 'MenuManagersaveMenu'}, // saveMenu
};
 //MenuManager
let MenuManagerupdateMenu = {
    __name: 'MenuManagerupdateMenu',
    MenuManagerupdateMenu: {controller: 'MenuManagerupdateMenu' , method: 'MenuManagerupdateMenu'}, // updateMenu
};
 //MenuManager
let MenuManagerupdateMenuRelation = {
    __name: 'MenuManagerupdateMenuRelation',
    MenuManagerupdateMenuRelation: {controller: 'MenuManagerupdateMenuRelation' , method: 'MenuManagerupdateMenuRelation'}, // updateMenuRelation
};
 //MenuManager
let MenuManagervalidateMenu = {
    __name: 'MenuManagervalidateMenu',
    MenuManagervalidateMenu: {controller: 'MenuManagervalidateMenu' , method: 'MenuManagervalidateMenu'}, // validateMenu
};
 //authForParty
let authForPartystorePartyAuth = {
    __name: 'authForPartystorePartyAuth',
    authForPartystorePartyAuth: {controller: 'authForPartystorePartyAuth' , method: 'authForPartystorePartyAuth'}, // storePartyAuth
};
 //empgroup
let empgroupaddEmpgroup = {
    __name: 'empgroupaddEmpgroup',
    empgroupaddEmpgroup: {controller: 'empgroupaddEmpgroup' , method: 'empgroupaddEmpgroup'}, // addEmpgroup
};
 //empgroup
let empgroupdeleteEmpgroup = {
    __name: 'empgroupdeleteEmpgroup',
    empgroupdeleteEmpgroup: {controller: 'empgroupdeleteEmpgroup' , method: 'empgroupdeleteEmpgroup'}, // deleteEmpgroup
};
 //empgroup
let empgroupqueryEmpInGroup = {
    __name: 'empgroupqueryEmpInGroup',
    empgroupqueryEmpInGroup: {controller: 'empgroupqueryEmpInGroup' , method: 'empgroupqueryEmpInGroup'}, // queryEmpInGroup
};
 //employee
let employeeQueryEmpAllowAddInGroup = {
    __name: 'employeeQueryEmpAllowAddInGroup',
    employeeQueryEmpAllowAddInGroup: {controller: 'employeeQueryEmpAllowAddInGroup' , method: 'employeeQueryEmpAllowAddInGroup'}, // QueryEmpAllowAddInGroup
};
 //employee
let employeeaddEmployee = {
    __name: 'employeeaddEmployee',
    employeeaddEmployee: {controller: 'employeeaddEmployee' , method: 'employeeaddEmployee'}, // addEmployee
};
 //employee
let employeedeleteEmployee = {
    __name: 'employeedeleteEmployee',
    employeedeleteEmployee: {controller: 'employeedeleteEmployee' , method: 'employeedeleteEmployee'}, // deleteEmployee
};
 //employee
let employeegetEmployee = {
    __name: 'employeegetEmployee',
    employeegetEmployee: {controller: 'employeegetEmployee' , method: 'employeegetEmployee'}, // getEmployee
};
 //employee
let employeequeryEmpAllowAddInPosition = {
    __name: 'employeequeryEmpAllowAddInPosition',
    employeequeryEmpAllowAddInPosition: {controller: 'employeequeryEmpAllowAddInPosition' , method: 'employeequeryEmpAllowAddInPosition'}, // queryEmpAllowAddInPosition
};
 //employee
let employeequeryEmpInPosition = {
    __name: 'employeequeryEmpInPosition',
    employeequeryEmpInPosition: {controller: 'employeequeryEmpInPosition' , method: 'employeequeryEmpInPosition'}, // queryEmpInPosition
};
 //employee
let employeequeryEmpUsers = {
    __name: 'employeequeryEmpUsers',
    employeequeryEmpUsers: {controller: 'employeequeryEmpUsers' , method: 'employeequeryEmpUsers'}, // queryEmpUsers
};
 //employee
let employeequeryEmployee = {
    __name: 'employeequeryEmployee',
    employeequeryEmployee: {controller: 'employeequeryEmployee' , method: 'employeequeryEmployee'}, // queryEmployee
};
 //employee
let employeeupdateEmpDetaiInfo = {
    __name: 'employeeupdateEmpDetaiInfo',
    employeeupdateEmpDetaiInfo: {controller: 'employeeupdateEmpDetaiInfo' , method: 'employeeupdateEmpDetaiInfo'}, // updateEmpDetaiInfo
};
 //employee
let employeeupdateEmployee = {
    __name: 'employeeupdateEmployee',
    employeeupdateEmployee: {controller: 'employeeupdateEmployee' , method: 'employeeupdateEmployee'}, // updateEmployee
};
 //employeeAuth
let employeeAuthgetEmpAuthorizedRoles = {
    __name: 'employeeAuthgetEmpAuthorizedRoles',
    employeeAuthgetEmpAuthorizedRoles: {controller: 'employeeAuthgetEmpAuthorizedRoles' , method: 'employeeAuthgetEmpAuthorizedRoles'}, // getEmpAuthorizedRoles
};
 //employeeAuth
let employeeAuthgetEmpManagedRoles = {
    __name: 'employeeAuthgetEmpManagedRoles',
    employeeAuthgetEmpManagedRoles: {controller: 'employeeAuthgetEmpManagedRoles' , method: 'employeeAuthgetEmpManagedRoles'}, // getEmpManagedRoles
};
 //employeeAuth
let employeeAuthgetEmpUnmanagedRoles = {
    __name: 'employeeAuthgetEmpUnmanagedRoles',
    employeeAuthgetEmpUnmanagedRoles: {controller: 'employeeAuthgetEmpUnmanagedRoles' , method: 'employeeAuthgetEmpUnmanagedRoles'}, // getEmpUnmanagedRoles
};
 //employeeAuth
let employeeAuthgetEmployeeAuth = {
    __name: 'employeeAuthgetEmployeeAuth',
    employeeAuthgetEmployeeAuth: {controller: 'employeeAuthgetEmployeeAuth' , method: 'employeeAuthgetEmployeeAuth'}, // getEmployeeAuth
};
 //group
let groupaddGroup = {
    __name: 'groupaddGroup',
    groupaddGroup: {controller: 'groupaddGroup' , method: 'groupaddGroup'}, // addGroup
};
 //group
let groupcopyNode = {
    __name: 'groupcopyNode',
    groupcopyNode: {controller: 'groupcopyNode' , method: 'groupcopyNode'}, // copyNode
};
 //group
let groupdeleteCurrentNode = {
    __name: 'groupdeleteCurrentNode',
    groupdeleteCurrentNode: {controller: 'groupdeleteCurrentNode' , method: 'groupdeleteCurrentNode'}, // deleteCurrentNode
};
 //group
let groupdeleteNode = {
    __name: 'groupdeleteNode',
    groupdeleteNode: {controller: 'groupdeleteNode' , method: 'groupdeleteNode'}, // deleteNode
};
 //group
let groupdeleteNodes = {
    __name: 'groupdeleteNodes',
    groupdeleteNodes: {controller: 'groupdeleteNodes' , method: 'groupdeleteNodes'}, // deleteNodes
};
 //group
let groupgetGroupWithParent = {
    __name: 'groupgetGroupWithParent',
    groupgetGroupWithParent: {controller: 'groupgetGroupWithParent' , method: 'groupgetGroupWithParent'}, // getGroupWithParent
};
 //group
let groupmoveNode = {
    __name: 'groupmoveNode',
    groupmoveNode: {controller: 'groupmoveNode' , method: 'groupmoveNode'}, // moveNode
};
 //group
let groupqueryAllChildNodes = {
    __name: 'groupqueryAllChildNodes',
    groupqueryAllChildNodes: {controller: 'groupqueryAllChildNodes' , method: 'groupqueryAllChildNodes'}, // queryAllChildNodes
};
 //group
let groupqueryGroup = {
    __name: 'groupqueryGroup',
    groupqueryGroup: {controller: 'groupqueryGroup' , method: 'groupqueryGroup'}, // queryGroup
};
 //group
let groupquerySubGroup = {
    __name: 'groupquerySubGroup',
    groupquerySubGroup: {controller: 'groupquerySubGroup' , method: 'groupquerySubGroup'}, // querySubGroup
};
 //group
let groupqueryTreeChildNodes = {
    __name: 'groupqueryTreeChildNodes',
    groupqueryTreeChildNodes: {controller: 'groupqueryTreeChildNodes' , method: 'groupqueryTreeChildNodes'}, // queryTreeChildNodes
};
 //group
let groupupdateGroup = {
    __name: 'groupupdateGroup',
    groupupdateGroup: {controller: 'groupupdateGroup' , method: 'groupupdateGroup'}, // updateGroup
};
 //groupAuth
let groupAuthgetGroupAuth = {
    __name: 'groupAuthgetGroupAuth',
    groupAuthgetGroupAuth: {controller: 'groupAuthgetGroupAuth' , method: 'groupAuthgetGroupAuth'}, // getGroupAuth
};
 //groupAuth
let groupAuthgetManagedGroupByRoleId = {
    __name: 'groupAuthgetManagedGroupByRoleId',
    groupAuthgetManagedGroupByRoleId: {controller: 'groupAuthgetManagedGroupByRoleId' , method: 'groupAuthgetManagedGroupByRoleId'}, // getManagedGroupByRoleId
};
 //groupAuth
let groupAuthsaveGroupAuth = {
    __name: 'groupAuthsaveGroupAuth',
    groupAuthsaveGroupAuth: {controller: 'groupAuthsaveGroupAuth' , method: 'groupAuthsaveGroupAuth'}, // saveGroupAuth
};
 //groupposi
let groupposiaddGroupposi = {
    __name: 'groupposiaddGroupposi',
    groupposiaddGroupposi: {controller: 'groupposiaddGroupposi' , method: 'groupposiaddGroupposi'}, // addGroupposi
};
 //groupposi
let groupposiqueryGroupposi = {
    __name: 'groupposiqueryGroupposi',
    groupposiqueryGroupposi: {controller: 'groupposiqueryGroupposi' , method: 'groupposiqueryGroupposi'}, // queryGroupposi
};
 //organization
let organizationaddOrg = {
    __name: 'organizationaddOrg',
    organizationaddOrg: {controller: 'organizationaddOrg' , method: 'organizationaddOrg'}, // addOrg
};
 //organization
let organizationcopyNode = {
    __name: 'organizationcopyNode',
    organizationcopyNode: {controller: 'organizationcopyNode' , method: 'organizationcopyNode'}, // copyNode
};
 //organization
let organizationdeleteCurrentNode = {
    __name: 'organizationdeleteCurrentNode',
    organizationdeleteCurrentNode: {controller: 'organizationdeleteCurrentNode' , method: 'organizationdeleteCurrentNode'}, // deleteCurrentNode
};
 //organization
let organizationdeleteNode = {
    __name: 'organizationdeleteNode',
    organizationdeleteNode: {controller: 'organizationdeleteNode' , method: 'organizationdeleteNode'}, // deleteNode
};
 //organization
let organizationdeleteNodes = {
    __name: 'organizationdeleteNodes',
    organizationdeleteNodes: {controller: 'organizationdeleteNodes' , method: 'organizationdeleteNodes'}, // deleteNodes
};
 //organization
let organizationdeleteOrg = {
    __name: 'organizationdeleteOrg',
    organizationdeleteOrg: {controller: 'organizationdeleteOrg' , method: 'organizationdeleteOrg'}, // deleteOrg
};
 //organization
let organizationgetOrgStaticTree = {
    __name: 'organizationgetOrgStaticTree',
    organizationgetOrgStaticTree: {controller: 'organizationgetOrgStaticTree' , method: 'organizationgetOrgStaticTree'}, // getOrgStaticTree
};
 //organization
let organizationgetOrgWithParent = {
    __name: 'organizationgetOrgWithParent',
    organizationgetOrgWithParent: {controller: 'organizationgetOrgWithParent' , method: 'organizationgetOrgWithParent'}, // getOrgWithParent
};
 //organization
let organizationmoveNode = {
    __name: 'organizationmoveNode',
    organizationmoveNode: {controller: 'organizationmoveNode' , method: 'organizationmoveNode'}, // moveNode
};
 //organization
let organizationqueryAll = {
    __name: 'organizationqueryAll',
    organizationqueryAll: {controller: 'organizationqueryAll' , method: 'organizationqueryAll'}, // queryAll
};
 //organization
let organizationqueryAllChildNodes = {
    __name: 'organizationqueryAllChildNodes',
    organizationqueryAllChildNodes: {controller: 'organizationqueryAllChildNodes' , method: 'organizationqueryAllChildNodes'}, // queryAllChildNodes
};
 //organization
let organizationqueryOrg = {
    __name: 'organizationqueryOrg',
    organizationqueryOrg: {controller: 'organizationqueryOrg' , method: 'organizationqueryOrg'}, // queryOrg
};
 //organization
let organizationqueryTreeChildNodes = {
    __name: 'organizationqueryTreeChildNodes',
    organizationqueryTreeChildNodes: {controller: 'organizationqueryTreeChildNodes' , method: 'organizationqueryTreeChildNodes'}, // queryTreeChildNodes
};
 //organization
let organizationupdateOrg = {
    __name: 'organizationupdateOrg',
    organizationupdateOrg: {controller: 'organizationupdateOrg' , method: 'organizationupdateOrg'}, // updateOrg
};
 //organizationAuth
let organizationAuthgetManagerOrgByRole = {
    __name: 'organizationAuthgetManagerOrgByRole',
    organizationAuthgetManagerOrgByRole: {controller: 'organizationAuthgetManagerOrgByRole' , method: 'organizationAuthgetManagerOrgByRole'}, // getManagerOrgByRole
};
 //organizationAuth
let organizationAuthgetOrganizationAuth = {
    __name: 'organizationAuthgetOrganizationAuth',
    organizationAuthgetOrganizationAuth: {controller: 'organizationAuthgetOrganizationAuth' , method: 'organizationAuthgetOrganizationAuth'}, // getOrganizationAuth
};
 //organizationAuth
let organizationAuthsaveOrganizationAuth = {
    __name: 'organizationAuthsaveOrganizationAuth',
    organizationAuthsaveOrganizationAuth: {controller: 'organizationAuthsaveOrganizationAuth' , method: 'organizationAuthsaveOrganizationAuth'}, // saveOrganizationAuth
};
 //position
let positionaddEmpposition = {
    __name: 'positionaddEmpposition',
    positionaddEmpposition: {controller: 'positionaddEmpposition' , method: 'positionaddEmpposition'}, // addEmpposition
};
 //position
let positionaddPosition = {
    __name: 'positionaddPosition',
    positionaddPosition: {controller: 'positionaddPosition' , method: 'positionaddPosition'}, // addPosition
};
 //position
let positiondeleteEmpposition = {
    __name: 'positiondeleteEmpposition',
    positiondeleteEmpposition: {controller: 'positiondeleteEmpposition' , method: 'positiondeleteEmpposition'}, // deleteEmpposition
};
 //position
let positiondeletePosition = {
    __name: 'positiondeletePosition',
    positiondeletePosition: {controller: 'positiondeletePosition' , method: 'positiondeletePosition'}, // deletePosition
};
 //position
let positiongetPositionWithParent = {
    __name: 'positiongetPositionWithParent',
    positiongetPositionWithParent: {controller: 'positiongetPositionWithParent' , method: 'positiongetPositionWithParent'}, // getPositionWithParent
};
 //position
let positionqueryOrgNodes = {
    __name: 'positionqueryOrgNodes',
    positionqueryOrgNodes: {controller: 'positionqueryOrgNodes' , method: 'positionqueryOrgNodes'}, // queryOrgNodes
};
 //position
let positionqueryPosition = {
    __name: 'positionqueryPosition',
    positionqueryPosition: {controller: 'positionqueryPosition' , method: 'positionqueryPosition'}, // queryPosition
};
 //position
let positionupdatePosition = {
    __name: 'positionupdatePosition',
    positionupdatePosition: {controller: 'positionupdatePosition' , method: 'positionupdatePosition'}, // updatePosition
};
 //positionAuth
let positionAuthgetPositionAuth = {
    __name: 'positionAuthgetPositionAuth',
    positionAuthgetPositionAuth: {controller: 'positionAuthgetPositionAuth' , method: 'positionAuthgetPositionAuth'}, // getPositionAuth
};
 //deptselect
let deptselectdeptChildList = {
    __name: 'deptselectdeptChildList',
    deptselectdeptChildList: {controller: 'deptselectdeptChildList' , method: 'deptselectdeptChildList'}, // deptChildList
};
 //deptselect
let deptselectdeptList = {
    __name: 'deptselectdeptList',
    deptselectdeptList: {controller: 'deptselectdeptList' , method: 'deptselectdeptList'}, // deptList
};
 //deptselect
let deptselectqueryOrgsByEmpId = {
    __name: 'deptselectqueryOrgsByEmpId',
    deptselectqueryOrgsByEmpId: {controller: 'deptselectqueryOrgsByEmpId' , method: 'deptselectqueryOrgsByEmpId'}, // queryOrgsByEmpId
};
 //deptselect
let deptselectqueryOrgsByName = {
    __name: 'deptselectqueryOrgsByName',
    deptselectqueryOrgsByName: {controller: 'deptselectqueryOrgsByName' , method: 'deptselectqueryOrgsByName'}, // queryOrgsByName
};
 //deptselect
let deptselectrecentDeptList = {
    __name: 'deptselectrecentDeptList',
    deptselectrecentDeptList: {controller: 'deptselectrecentDeptList' , method: 'deptselectrecentDeptList'}, // recentDeptList
};
 //groupselect
let groupselectgroupList = {
    __name: 'groupselectgroupList',
    groupselectgroupList: {controller: 'groupselectgroupList' , method: 'groupselectgroupList'}, // groupList
};
 //recentvisit
let recentvisitadd = {
    __name: 'recentvisitadd',
    recentvisitadd: {controller: 'recentvisitadd' , method: 'recentvisitadd'}, // add
};
 //roleselect
let roleselectroleList = {
    __name: 'roleselectroleList',
    roleselectroleList: {controller: 'roleselectroleList' , method: 'roleselectroleList'}, // roleList
};
 //roleselect
let roleselectroleListWithPage = {
    __name: 'roleselectroleListWithPage',
    roleselectroleListWithPage: {controller: 'roleselectroleListWithPage' , method: 'roleselectroleListWithPage'}, // roleListWithPage
};
 //userselect
let userselectdeptUserList = {
    __name: 'userselectdeptUserList',
    userselectdeptUserList: {controller: 'userselectdeptUserList' , method: 'userselectdeptUserList'}, // deptUserList
};
 //userselect
let userselectgroupUserList = {
    __name: 'userselectgroupUserList',
    userselectgroupUserList: {controller: 'userselectgroupUserList' , method: 'userselectgroupUserList'}, // groupUserList
};
 //userselect
let userselectonlineUserList = {
    __name: 'userselectonlineUserList',
    userselectonlineUserList: {controller: 'userselectonlineUserList' , method: 'userselectonlineUserList'}, // onlineUserList
};
 //userselect
let userselectqueryUserListByName = {
    __name: 'userselectqueryUserListByName',
    userselectqueryUserListByName: {controller: 'userselectqueryUserListByName' , method: 'userselectqueryUserListByName'}, // queryUserListByName
};
 //userselect
let userselectrecentUserList = {
    __name: 'userselectrecentUserList',
    userselectrecentUserList: {controller: 'userselectrecentUserList' , method: 'userselectrecentUserList'}, // recentUserList
};
 //userselect
let userselectroleUserList = {
    __name: 'userselectroleUserList',
    userselectroleUserList: {controller: 'userselectroleUserList' , method: 'userselectroleUserList'}, // roleUserList
};
 //ipRuleComponent
let ipRuleComponentdeleteAccessRules = {
    __name: 'ipRuleComponentdeleteAccessRules',
    ipRuleComponentdeleteAccessRules: {controller: 'ipRuleComponentdeleteAccessRules' , method: 'ipRuleComponentdeleteAccessRules'}, // deleteAccessRules
};
 //ipRuleComponent
let ipRuleComponenteditAccessRules = {
    __name: 'ipRuleComponenteditAccessRules',
    ipRuleComponenteditAccessRules: {controller: 'ipRuleComponenteditAccessRules' , method: 'ipRuleComponenteditAccessRules'}, // editAccessRules
};
 //ipRuleComponent
let ipRuleComponentgetAccessRules = {
    __name: 'ipRuleComponentgetAccessRules',
    ipRuleComponentgetAccessRules: {controller: 'ipRuleComponentgetAccessRules' , method: 'ipRuleComponentgetAccessRules'}, // getAccessRules
};
 //ipRuleComponent
let ipRuleComponentverificationIp = {
    __name: 'ipRuleComponentverificationIp',
    ipRuleComponentverificationIp: {controller: 'ipRuleComponentverificationIp' , method: 'ipRuleComponentverificationIp'}, // verificationIp
};
 //PartyManager
let PartyManagerqueryPartyWithPartyId = {
    __name: 'PartyManagerqueryPartyWithPartyId',
    PartyManagerqueryPartyWithPartyId: {controller: 'PartyManagerqueryPartyWithPartyId' , method: 'PartyManagerqueryPartyWithPartyId'}, // queryPartyWithPartyId
};
 //PartyManager
let PartyManagersaveParty = {
    __name: 'PartyManagersaveParty',
    PartyManagersaveParty: {controller: 'PartyManagersaveParty' , method: 'PartyManagersaveParty'}, // saveParty
};
 //RoleManager
let RoleManageraddRole = {
    __name: 'RoleManageraddRole',
    RoleManageraddRole: {controller: 'RoleManageraddRole' , method: 'RoleManageraddRole'}, // addRole
};
 //RoleManager
let RoleManagercheckRoleExist = {
    __name: 'RoleManagercheckRoleExist',
    RoleManagercheckRoleExist: {controller: 'RoleManagercheckRoleExist' , method: 'RoleManagercheckRoleExist'}, // checkRoleExist
};
 //RoleManager
let RoleManagerqueryAuthorizedRole = {
    __name: 'RoleManagerqueryAuthorizedRole',
    RoleManagerqueryAuthorizedRole: {controller: 'RoleManagerqueryAuthorizedRole' , method: 'RoleManagerqueryAuthorizedRole'}, // queryAuthorizedRole
};
 //RoleManager
let RoleManagerqueryRole = {
    __name: 'RoleManagerqueryRole',
    RoleManagerqueryRole: {controller: 'RoleManagerqueryRole' , method: 'RoleManagerqueryRole'}, // queryRole
};
 //RoleManager
let RoleManagerremoveRoles = {
    __name: 'RoleManagerremoveRoles',
    RoleManagerremoveRoles: {controller: 'RoleManagerremoveRoles' , method: 'RoleManagerremoveRoles'}, // removeRoles
};
 //RoleManager
let RoleManagerupdateRole = {
    __name: 'RoleManagerupdateRole',
    RoleManagerupdateRole: {controller: 'RoleManagerupdateRole' , method: 'RoleManagerupdateRole'}, // updateRole
};
 //UserManager
let UserManageraddUser = {
    __name: 'UserManageraddUser',
    UserManageraddUser: {controller: 'UserManageraddUser' , method: 'UserManageraddUser'}, // addUser
};
 //UserManager
let UserManagercheckPassword = {
    __name: 'UserManagercheckPassword',
    UserManagercheckPassword: {controller: 'UserManagercheckPassword' , method: 'UserManagercheckPassword'}, // checkPassword
};
 //UserManager
let UserManagercheckUser = {
    __name: 'UserManagercheckUser',
    UserManagercheckUser: {controller: 'UserManagercheckUser' , method: 'UserManagercheckUser'}, // checkUser
};
 //UserManager
let UserManagerdeleteUser = {
    __name: 'UserManagerdeleteUser',
    UserManagerdeleteUser: {controller: 'UserManagerdeleteUser' , method: 'UserManagerdeleteUser'}, // deleteUser
};
 //UserManager
let UserManagergetCapUser = {
    __name: 'UserManagergetCapUser',
    UserManagergetCapUser: {controller: 'UserManagergetCapUser' , method: 'UserManagergetCapUser'}, // getCapUser
};
 //UserManager
let UserManagergetUser = {
    __name: 'UserManagergetUser',
    UserManagergetUser: {controller: 'UserManagergetUser' , method: 'UserManagergetUser'}, // getUser
};
 //UserManager
let UserManagerqueryDefaultUser = {
    __name: 'UserManagerqueryDefaultUser',
    UserManagerqueryDefaultUser: {controller: 'UserManagerqueryDefaultUser' , method: 'UserManagerqueryDefaultUser'}, // queryDefaultUser
};
 //UserManager
let UserManagerqueryUser = {
    __name: 'UserManagerqueryUser',
    UserManagerqueryUser: {controller: 'UserManagerqueryUser' , method: 'UserManagerqueryUser'}, // queryUser
};
 //UserManager
let UserManagerupdatePasswords = {
    __name: 'UserManagerupdatePasswords',
    UserManagerupdatePasswords: {controller: 'UserManagerupdatePasswords' , method: 'UserManagerupdatePasswords'}, // updatePasswords
};
 //UserManager
let UserManagerupdateUser = {
    __name: 'UserManagerupdateUser',
    UserManagerupdateUser: {controller: 'UserManagerupdateUser' , method: 'UserManagerupdateUser'}, // updateUser
};
 //UserManager
let UserManagerupdateUserPassword = {
    __name: 'UserManagerupdateUserPassword',
    UserManagerupdateUserPassword: {controller: 'UserManagerupdateUserPassword' , method: 'UserManagerupdateUserPassword'}, // updateUserPassword
};
 //win7Service
let win7ServiceaddUserBg = {
    __name: 'win7ServiceaddUserBg',
    win7ServiceaddUserBg: {controller: 'win7ServiceaddUserBg' , method: 'win7ServiceaddUserBg'}, // addUserBg
};
 //win7Service
let win7ServicedelUserBg = {
    __name: 'win7ServicedelUserBg',
    win7ServicedelUserBg: {controller: 'win7ServicedelUserBg' , method: 'win7ServicedelUserBg'}, // delUserBg
};
 //win7Service
let win7ServicegetMyConfig = {
    __name: 'win7ServicegetMyConfig',
    win7ServicegetMyConfig: {controller: 'win7ServicegetMyConfig' , method: 'win7ServicegetMyConfig'}, // getMyConfig
};
 //win7Service
let win7ServicegetUserBg = {
    __name: 'win7ServicegetUserBg',
    win7ServicegetUserBg: {controller: 'win7ServicegetUserBg' , method: 'win7ServicegetUserBg'}, // getUserBg
};
 //win7Service
let win7ServicesetUserBg = {
    __name: 'win7ServicesetUserBg',
    win7ServicesetUserBg: {controller: 'win7ServicesetUserBg' , method: 'win7ServicesetUserBg'}, // setUserBg
};
 //win7Service
let win7ServiceupdateAutoStartConfig = {
    __name: 'win7ServiceupdateAutoStartConfig',
    win7ServiceupdateAutoStartConfig: {controller: 'win7ServiceupdateAutoStartConfig' , method: 'win7ServiceupdateAutoStartConfig'}, // updateAutoStartConfig
};
 //win7Service
let win7ServiceupdateDesktopConfig = {
    __name: 'win7ServiceupdateDesktopConfig',
    win7ServiceupdateDesktopConfig: {controller: 'win7ServiceupdateDesktopConfig' , method: 'win7ServiceupdateDesktopConfig'}, // updateDesktopConfig
};
 //win7Service
let win7ServiceupdateIconsConfig = {
    __name: 'win7ServiceupdateIconsConfig',
    win7ServiceupdateIconsConfig: {controller: 'win7ServiceupdateIconsConfig' , method: 'win7ServiceupdateIconsConfig'}, // updateIconsConfig
};

export {
    fileuploadloadFiles,
    agentaddAgent,
    agentdeleteAgent,
    agentdetailAgent,
    agentmodifyAgent,
    agentgetProActInfo,
    agentqueryAgent,
    agentqueryAgentInfo,
    agentqueryMyAgent,
    agentqueryProActInfo,
    processcommonQueryProcessInst,
    processqueryMyProcess,
    processqueryProcess,
    processgetCatalogSubByUserid,
    processgetProcessCatalogs,
    processcreateStartProcessInst,
    processqueryPublishedProcessWithCatalog,
    taskconfrimNotification,
    taskqueryNotificationList,
    taskexecuteWorkItem,
    taskopenBizform,
    taskqueryTaskList,
    webappointActivities4Freeflow,
    webappointParticipants4StepActivity,
    webfetchMessageList,
    webgetActivitesNeedAppointParticipant,
    webgetAppointActivityType,
    webgetProcessGraph,
    webgetWorkItemForm,
    webgetWorkItemsByProcInstId,
    webisActivitiesAppointed,
    webqueryAnnotateListByProcessInstID,
    webqueryAnnotateListByTaskID,
    webqueryParticipants,
    webqueryPressListByProcessInstID,
    webqueryPressListByTaskID,
    webqueryProcessAndActivity,
    webqueryStepActivities,
    websearchParticipants,
    LoginManagerauthentication,
    LoginManagergetCasInfo,
    LoginManagergetMenuData,
    LoginManagergetMenuList,
    LoginManagergetUserIdAndName,
    LoginManagergetUserPool,
    LoginManagerisend,
    LoginManagerlogin,
    LoginManagerlogout,
    LoginManagersyncUserInfo,
    TenantServiceManagerchangeTenant,
    TenantServiceManagercheckChangeTenant,
    servicegetFunctionMenuGraph,
    servicegetPartyAuthGraph,
    ManageableResgetManageableGroup,
    ManageableResgetManageableOrg,
    partyauthaddPartyAuth,
    partyauthdeletePartyAuth,
    partyauthgetAuthorizedRoleList,
    partyauthgetUnauthorizedRoleList,
    TenantManageraddTenant,
    TenantManagerdeleteTenants,
    TenantManagerqueryTenants,
    TenantManagerupdateTenant,
    DictManagerexportDict,
    DictManagerimportDict,
    DictManagerqueryDict,
    DictManagerqueryDictType,
    DictManagerrefreshDictCache,
    DictManagerremoveDict,
    DictManagerremoveDictType,
    DictManagerremoveDictTypeCascade,
    DictManagersaveDict,
    DictManagersaveDictType,
    entitygetEntityInfoPropertie,
    entitygetEntityInfoProperties,
    entitygetEntityInfos,
    ruledelRules,
    rulegetConValues,
    rulegetEntityCapRules,
    rulegetRightValues,
    rulegetRuleCondition,
    rulesaveRule,
    rulestorePartyAuth,
    ruleupdateRule,
    ApplicationManagerdeleteApplication,
    ApplicationManagerdeleteApplicationNodes,
    ApplicationManagerdeleteApplications,
    ApplicationManagergetApplication,
    ApplicationManagerqueryApplication,
    ApplicationManagerqueryApplicationTree,
    ApplicationManagerqueryApplicationTreeNode,
    ApplicationManagersaveApplication,
    ApplicationManagertest,
    ApplicationManagerupdateApplication,
    FuncGroupManagergetFuncGroup,
    FuncGroupManagerqueryFuncGroup,
    FuncGroupManagerquerySubFuncGroup,
    FuncGroupManagersaveFuncGroup,
    FuncGroupManagersaveSubFuncGroup,
    FuncGroupManagerupdateFuncGroup,
    FuncGroupManagerupdateFuncGroupRelation,
    FunctionAuthgetFunctionAuthTree,
    FunctionAuthsaveFunctionAuths,
    FunctionManagergetFunction,
    FunctionManagerqueryFunction,
    FunctionManagersaveFunction,
    FunctionManagerupdateFunction,
    FunctionManagervalidateFunction,
    MenuManagerdeleteMenu,
    MenuManagerdeleteMenuNodes,
    MenuManagerdeleteMenus,
    MenuManagergetMenu,
    MenuManagerqueryMenu,
    MenuManagerqueryMenuTreeNode,
    MenuManagersaveMenu,
    MenuManagerupdateMenu,
    MenuManagerupdateMenuRelation,
    MenuManagervalidateMenu,
    authForPartystorePartyAuth,
    empgroupaddEmpgroup,
    empgroupdeleteEmpgroup,
    empgroupqueryEmpInGroup,
    employeeQueryEmpAllowAddInGroup,
    employeeaddEmployee,
    employeedeleteEmployee,
    employeegetEmployee,
    employeequeryEmpAllowAddInPosition,
    employeequeryEmpInPosition,
    employeequeryEmpUsers,
    employeequeryEmployee,
    employeeupdateEmpDetaiInfo,
    employeeupdateEmployee,
    employeeAuthgetEmpAuthorizedRoles,
    employeeAuthgetEmpManagedRoles,
    employeeAuthgetEmpUnmanagedRoles,
    employeeAuthgetEmployeeAuth,
    groupaddGroup,
    groupcopyNode,
    groupdeleteCurrentNode,
    groupdeleteNode,
    groupdeleteNodes,
    groupgetGroupWithParent,
    groupmoveNode,
    groupqueryAllChildNodes,
    groupqueryGroup,
    groupquerySubGroup,
    groupqueryTreeChildNodes,
    groupupdateGroup,
    groupAuthgetGroupAuth,
    groupAuthgetManagedGroupByRoleId,
    groupAuthsaveGroupAuth,
    groupposiaddGroupposi,
    groupposiqueryGroupposi,
    organizationaddOrg,
    organizationcopyNode,
    organizationdeleteCurrentNode,
    organizationdeleteNode,
    organizationdeleteNodes,
    organizationdeleteOrg,
    organizationgetOrgStaticTree,
    organizationgetOrgWithParent,
    organizationmoveNode,
    organizationqueryAll,
    organizationqueryAllChildNodes,
    organizationqueryOrg,
    organizationqueryTreeChildNodes,
    organizationupdateOrg,
    organizationAuthgetManagerOrgByRole,
    organizationAuthgetOrganizationAuth,
    organizationAuthsaveOrganizationAuth,
    positionaddEmpposition,
    positionaddPosition,
    positiondeleteEmpposition,
    positiondeletePosition,
    positiongetPositionWithParent,
    positionqueryOrgNodes,
    positionqueryPosition,
    positionupdatePosition,
    positionAuthgetPositionAuth,
    deptselectdeptChildList,
    deptselectdeptList,
    deptselectqueryOrgsByEmpId,
    deptselectqueryOrgsByName,
    deptselectrecentDeptList,
    groupselectgroupList,
    recentvisitadd,
    roleselectroleList,
    roleselectroleListWithPage,
    userselectdeptUserList,
    userselectgroupUserList,
    userselectonlineUserList,
    userselectqueryUserListByName,
    userselectrecentUserList,
    userselectroleUserList,
    ipRuleComponentdeleteAccessRules,
    ipRuleComponenteditAccessRules,
    ipRuleComponentgetAccessRules,
    ipRuleComponentverificationIp,
    PartyManagerqueryPartyWithPartyId,
    PartyManagersaveParty,
    RoleManageraddRole,
    RoleManagercheckRoleExist,
    RoleManagerqueryAuthorizedRole,
    RoleManagerqueryRole,
    RoleManagerremoveRoles,
    RoleManagerupdateRole,
    UserManageraddUser,
    UserManagercheckPassword,
    UserManagercheckUser,
    UserManagerdeleteUser,
    UserManagergetCapUser,
    UserManagergetUser,
    UserManagerqueryDefaultUser,
    UserManagerqueryUser,
    UserManagerupdatePasswords,
    UserManagerupdateUser,
    UserManagerupdateUserPassword,
    win7ServiceaddUserBg,
    win7ServicedelUserBg,
    win7ServicegetMyConfig,
    win7ServicegetUserBg,
    win7ServicesetUserBg,
    win7ServiceupdateAutoStartConfig,
    win7ServiceupdateDesktopConfig,
    win7ServiceupdateIconsConfig,
};
